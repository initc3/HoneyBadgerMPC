/* Generated by Cython 0.29.17 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "honeybadgermpc/ntl/ccobject_impl.h",
            "honeybadgermpc/ntl/ntlwrapper_impl.h",
            "honeybadgermpc/ntl/rsdecode_impl.h"
        ],
        "extra_compile_args": [
            "-std=c++11",
            "-O3",
            "-pthread",
            "-fopenmp",
            "-march=native"
        ],
        "extra_link_args": [
            "-std=c++11",
            "-O3",
            "-pthread",
            "-fopenmp",
            "-lntl",
            "-lgmp",
            "-lm",
            "-march=native"
        ],
        "include_dirs": [
            "./honeybadgermpc/ntl"
        ],
        "language": "c++",
        "name": "honeybadgermpc.ntl._hbmpc_ntl_helpers",
        "sources": [
            "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx"
        ]
    },
    "module_name": "honeybadgermpc.ntl._hbmpc_ntl_helpers"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_17"
#define CYTHON_HEX_VERSION 0x001D11F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__honeybadgermpc__ntl___hbmpc_ntl_helpers
#define __PYX_HAVE_API__honeybadgermpc__ntl___hbmpc_ntl_helpers
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "ntlwrapper_impl.h"
#include "rsdecode_impl.h"
#include "ccobject_impl.h"
#include <string.h>
#include <stdlib.h>
#include <omp.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/
struct __pyx_opt_args_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate;

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":389
 *     return AvailableThreads()
 * 
 * cpdef gao_interpolate(x, y, int k, modulus, z=None, omega=None, order=None,             # <<<<<<<<<<<<<<
 *                       use_omega_powers=False):
 *     cdef vec_ZZ_p x_vec, y_vec, res_vec, err_vec
 */
struct __pyx_opt_args_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate {
  int __pyx_n;
  PyObject *z;
  PyObject *omega;
  PyObject *order;
  PyObject *use_omega_powers;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_FloorDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceFloorDivide(op1, op2) : PyNumber_FloorDivide(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'honeybadgermpc.ntl.ntlwrapper' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'honeybadgermpc.ntl.rsdecode' */

/* Module declarations from 'honeybadgermpc.ntl.ccobject' */

/* Module declarations from 'cpython.int' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'openmp' */

/* Module declarations from 'honeybadgermpc.ntl._hbmpc_ntl_helpers' */
static ZZ __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(PyObject *); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZToInt(ZZ); /*proto*/
static ZZ_p __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(PyObject *); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt(ZZ_p); /*proto*/
static ZZ __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(PyObject *); /*proto*/
static vec_ZZ_p __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_list_to_vec_ZZ_p(PyObject *); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZ_to_str(ZZ); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_evaluate(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_inverse(PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_batch_interpolate(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_batch_evaluate(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_fft(PyObject *, PyObject *, PyObject *, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_partial_fft(PyObject *, PyObject *, PyObject *, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_fft_batch_evaluate(PyObject *, PyObject *, PyObject *, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_SetNTLNumThreads(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_AvailableNTLThreads(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate(PyObject *, PyObject *, int, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_SetNumThreads(int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_GetMaxThreads(int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "honeybadgermpc.ntl._hbmpc_ntl_helpers"
extern int __pyx_module_is_main_honeybadgermpc__ntl___hbmpc_ntl_helpers;
int __pyx_module_is_main_honeybadgermpc__ntl___hbmpc_ntl_helpers = 0;

/* Implementation of 'honeybadgermpc.ntl._hbmpc_ntl_helpers' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_max;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__5[] = "_";
static const char __pyx_k_ys[] = "ys";
static const char __pyx_k_zs[] = "zs";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_y_vec[] = "y_vec";
static const char __pyx_k_z_vec[] = "z_vec";
static const char __pyx_k_coeffs[] = "coeffs";
static const char __pyx_k_little[] = "little";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_modulus[] = "modulus";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_ys_list[] = "ys_list";
static const char __pyx_k_P_coeffs[] = "P_coeffs";
static const char __pyx_k_n_chunks[] = "n_chunks";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_sqrt_mod[] = "sqrt_mod";
static const char __pyx_k_to_bytes[] = "to_bytes";
static const char __pyx_k_zz_omega[] = "zz_omega";
static const char __pyx_k_data_list[] = "data_list";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_bit_length[] = "bit_length";
static const char __pyx_k_from_bytes[] = "from_bytes";
static const char __pyx_k_polynomial[] = "polynomial";
static const char __pyx_k_y_vec_list[] = "y_vec_list";
static const char __pyx_k_zz_modulus[] = "zz_modulus";
static const char __pyx_k_polynomials[] = "polynomials";
static const char __pyx_k_Ad_evals_vec[] = "Ad_evals_vec";
static const char __pyx_k_fft_interpolate[] = "fft_interpolate";
static const char __pyx_k_result_vec_list[] = "result_vec_list";
static const char __pyx_k_use_omega_powers[] = "use_omega_powers";
static const char __pyx_k_Invalid_arguments[] = "Invalid arguments";
static const char __pyx_k_InterpolationError[] = "InterpolationError";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Interpolation_failed[] = "Interpolation failed";
static const char __pyx_k_Unsupported_data_type[] = "Unsupported data type. ";
static const char __pyx_k_fft_batch_interpolate[] = "fft_batch_interpolate";
static const char __pyx_k_honeybadgermpc_ntl__hbmpc_ntl_he[] = "honeybadgermpc.ntl._hbmpc_ntl_helpers";
static const char __pyx_k_honeybadgermpc_ntl_hbmpc_ntl_hel[] = "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_Ad_evals_vec;
static PyObject *__pyx_n_s_InterpolationError;
static PyObject *__pyx_kp_s_Interpolation_failed;
static PyObject *__pyx_kp_s_Invalid_arguments;
static PyObject *__pyx_n_s_P_coeffs;
static PyObject *__pyx_kp_u_Unsupported_data_type;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s__5;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_bit_length;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_coeffs;
static PyObject *__pyx_n_s_data_list;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_fft_batch_interpolate;
static PyObject *__pyx_n_s_fft_interpolate;
static PyObject *__pyx_n_s_from_bytes;
static PyObject *__pyx_n_s_honeybadgermpc_ntl__hbmpc_ntl_he;
static PyObject *__pyx_kp_s_honeybadgermpc_ntl_hbmpc_ntl_hel;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_little;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_modulus;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_chunks;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_polynomial;
static PyObject *__pyx_n_s_polynomials;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_vec_list;
static PyObject *__pyx_n_s_sqrt_mod;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_bytes;
static PyObject *__pyx_n_s_use_omega_powers;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y_vec;
static PyObject *__pyx_n_s_y_vec_list;
static PyObject *__pyx_n_s_ys;
static PyObject *__pyx_n_s_ys_list;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_z_vec;
static PyObject *__pyx_n_s_zs;
static PyObject *__pyx_n_s_zz_modulus;
static PyObject *__pyx_n_s_zz_omega;
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_modulus); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_2evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_polynomial, PyObject *__pyx_v_x, PyObject *__pyx_v_modulus); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_4vandermonde_inverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_modulus); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_6vandermonde_batch_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_data_list, PyObject *__pyx_v_modulus); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_8vandermonde_batch_evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_polynomials, PyObject *__pyx_v_modulus); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_10fft(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_12partial_fft(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n, int __pyx_v_k); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_14fft_batch_evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n, int __pyx_v_k); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_16fft_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_zs, PyObject *__pyx_v_ys, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_18fft_batch_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_zs, PyObject *__pyx_v_ys_list, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_20SetNTLNumThreads(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_x); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_22AvailableNTLThreads(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_24gao_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_k, PyObject *__pyx_v_modulus, PyObject *__pyx_v_z, PyObject *__pyx_v_omega, PyObject *__pyx_v_order, PyObject *__pyx_v_use_omega_powers); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_26sqrt_mod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_28SetNumThreads(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_30GetMaxThreads(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
/* Late includes */

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":20
 * 
 * 
 * cdef ZZ intToZZ(x):             # <<<<<<<<<<<<<<
 *     num = (x.bit_length() + 7) // 8
 *     return ZZFromBytes(x.to_bytes(num, 'little'), num)
 */

static ZZ __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(PyObject *__pyx_v_x) {
  PyObject *__pyx_v_num = NULL;
  ZZ __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  unsigned char const *__pyx_t_6;
  long __pyx_t_7;
  __Pyx_RefNannySetupContext("intToZZ", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":21
 * 
 * cdef ZZ intToZZ(x):
 *     num = (x.bit_length() + 7) // 8             # <<<<<<<<<<<<<<
 *     return ZZFromBytes(x.to_bytes(num, 'little'), num)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_bit_length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_7, 7, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_FloorDivideObjC(__pyx_t_2, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":22
 * cdef ZZ intToZZ(x):
 *     num = (x.bit_length() + 7) // 8
 *     return ZZFromBytes(x.to_bytes(num, 'little'), num)             # <<<<<<<<<<<<<<
 * 
 * cdef ZZToInt(ZZ X):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_to_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_num, __pyx_n_s_little};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_num, __pyx_n_s_little};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_num);
    __Pyx_GIVEREF(__pyx_v_num);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_num);
    __Pyx_INCREF(__pyx_n_s_little);
    __Pyx_GIVEREF(__pyx_n_s_little);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_little);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsUString(__pyx_t_1); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyInt_As_long(__pyx_v_num); if (unlikely((__pyx_t_7 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_r = ZZFromBytes(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":20
 * 
 * 
 * cdef ZZ intToZZ(x):             # <<<<<<<<<<<<<<
 *     num = (x.bit_length() + 7) // 8
 *     return ZZFromBytes(x.to_bytes(num, 'little'), num)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("honeybadgermpc.ntl._hbmpc_ntl_helpers.intToZZ", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_num);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":24
 *     return ZZFromBytes(x.to_bytes(num, 'little'), num)
 * 
 * cdef ZZToInt(ZZ X):             # <<<<<<<<<<<<<<
 *     cdef int n = ZZNumBytes(X)
 *     cdef unsigned char*b = bytesFromZZ(X)
 */

static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZToInt(ZZ __pyx_v_X) {
  int __pyx_v_n;
  unsigned char *__pyx_v_b;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("ZZToInt", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":25
 * 
 * cdef ZZToInt(ZZ X):
 *     cdef int n = ZZNumBytes(X)             # <<<<<<<<<<<<<<
 *     cdef unsigned char*b = bytesFromZZ(X)
 *     result = int.from_bytes(b[:n], 'little')
 */
  __pyx_v_n = NumBytes(__pyx_v_X);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":26
 * cdef ZZToInt(ZZ X):
 *     cdef int n = ZZNumBytes(X)
 *     cdef unsigned char*b = bytesFromZZ(X)             # <<<<<<<<<<<<<<
 *     result = int.from_bytes(b[:n], 'little')
 *     free(b)
 */
  __pyx_v_b = bytesFromZZ(__pyx_v_X);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":27
 *     cdef int n = ZZNumBytes(X)
 *     cdef unsigned char*b = bytesFromZZ(X)
 *     result = int.from_bytes(b[:n], 'little')             # <<<<<<<<<<<<<<
 *     free(b)
 *     return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyInt_Type)), __pyx_n_s_from_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_b) + 0, __pyx_v_n - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_little};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_n_s_little};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_little);
    __Pyx_GIVEREF(__pyx_n_s_little);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_little);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":28
 *     cdef unsigned char*b = bytesFromZZ(X)
 *     result = int.from_bytes(b[:n], 'little')
 *     free(b)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  free(__pyx_v_b);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":29
 *     result = int.from_bytes(b[:n], 'little')
 *     free(b)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef ZZ_p intToZZp(x):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":24
 *     return ZZFromBytes(x.to_bytes(num, 'little'), num)
 * 
 * cdef ZZToInt(ZZ X):             # <<<<<<<<<<<<<<
 *     cdef int n = ZZNumBytes(X)
 *     cdef unsigned char*b = bytesFromZZ(X)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.ZZToInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":31
 *     return result
 * 
 * cdef ZZ_p intToZZp(x):             # <<<<<<<<<<<<<<
 *     return to_ZZ_p(intToZZ(x))
 * 
 */

static ZZ_p __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(PyObject *__pyx_v_x) {
  ZZ_p __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intToZZp", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":32
 * 
 * cdef ZZ_p intToZZp(x):
 *     return to_ZZ_p(intToZZ(x))             # <<<<<<<<<<<<<<
 * 
 * cdef ZZpToInt(ZZ_p X):
 */
  __pyx_r = to_ZZ_p(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_x));
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":31
 *     return result
 * 
 * cdef ZZ_p intToZZp(x):             # <<<<<<<<<<<<<<
 *     return to_ZZ_p(intToZZ(x))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":34
 *     return to_ZZ_p(intToZZ(x))
 * 
 * cdef ZZpToInt(ZZ_p X):             # <<<<<<<<<<<<<<
 *     return ZZToInt(to_ZZ(X))
 * 
 */

static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt(ZZ_p __pyx_v_X) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ZZpToInt", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":35
 * 
 * cdef ZZpToInt(ZZ_p X):
 *     return ZZToInt(to_ZZ(X))             # <<<<<<<<<<<<<<
 * 
 * cdef ZZ py_obj_to_ZZ(object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZToInt(rep(__pyx_v_X)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":34
 *     return to_ZZ_p(intToZZ(x))
 * 
 * cdef ZZpToInt(ZZ_p X):             # <<<<<<<<<<<<<<
 *     return ZZToInt(to_ZZ(X))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.ZZpToInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":37
 *     return ZZToInt(to_ZZ(X))
 * 
 * cdef ZZ py_obj_to_ZZ(object v):             # <<<<<<<<<<<<<<
 *     cdef ZZ result
 *     if isinstance(v, int):
 */

static ZZ __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(PyObject *__pyx_v_v) {
  ZZ __pyx_v_result;
  ZZ __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("py_obj_to_ZZ", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":39
 * cdef ZZ py_obj_to_ZZ(object v):
 *     cdef ZZ result
 *     if isinstance(v, int):             # <<<<<<<<<<<<<<
 *         result = intToZZ(v)
 *     elif v is not None:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_v); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":40
 *     cdef ZZ result
 *     if isinstance(v, int):
 *         result = intToZZ(v)             # <<<<<<<<<<<<<<
 *     elif v is not None:
 *         ccreadstr(result, v)
 */
    __pyx_v_result = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_v);

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":39
 * cdef ZZ py_obj_to_ZZ(object v):
 *     cdef ZZ result
 *     if isinstance(v, int):             # <<<<<<<<<<<<<<
 *         result = intToZZ(v)
 *     elif v is not None:
 */
    goto __pyx_L3;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":41
 *     if isinstance(v, int):
 *         result = intToZZ(v)
 *     elif v is not None:             # <<<<<<<<<<<<<<
 *         ccreadstr(result, v)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_v != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":42
 *         result = intToZZ(v)
 *     elif v is not None:
 *         ccreadstr(result, v)             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(f"Unsupported data type. {type(v)}")
 */
    __pyx_t_3 = ccreadstr<ZZ>(__pyx_v_result, __pyx_v_v); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 42, __pyx_L1_error)

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":41
 *     if isinstance(v, int):
 *         result = intToZZ(v)
 *     elif v is not None:             # <<<<<<<<<<<<<<
 *         ccreadstr(result, v)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":44
 *         ccreadstr(result, v)
 *     else:
 *         raise ValueError(f"Unsupported data type. {type(v)}")             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_v)), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_data_type, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 44, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":46
 *         raise ValueError(f"Unsupported data type. {type(v)}")
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef ZZ_p py_obj_to_ZZ_p(object v):
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":37
 *     return ZZToInt(to_ZZ(X))
 * 
 * cdef ZZ py_obj_to_ZZ(object v):             # <<<<<<<<<<<<<<
 *     cdef ZZ result
 *     if isinstance(v, int):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("honeybadgermpc.ntl._hbmpc_ntl_helpers.py_obj_to_ZZ", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":48
 *     return result
 * 
 * cdef ZZ_p py_obj_to_ZZ_p(object v):             # <<<<<<<<<<<<<<
 *     cdef ZZ_p result
 *     if isinstance(v, int):
 */

static ZZ_p __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ_p(PyObject *__pyx_v_v) {
  ZZ_p __pyx_v_result;
  ZZ_p __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("py_obj_to_ZZ_p", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":50
 * cdef ZZ_p py_obj_to_ZZ_p(object v):
 *     cdef ZZ_p result
 *     if isinstance(v, int):             # <<<<<<<<<<<<<<
 *         result = intToZZp(v)
 *     elif v is not None:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_v); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":51
 *     cdef ZZ_p result
 *     if isinstance(v, int):
 *         result = intToZZp(v)             # <<<<<<<<<<<<<<
 *     elif v is not None:
 *         ccreadstr(result, v)
 */
    __pyx_v_result = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_v);

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":50
 * cdef ZZ_p py_obj_to_ZZ_p(object v):
 *     cdef ZZ_p result
 *     if isinstance(v, int):             # <<<<<<<<<<<<<<
 *         result = intToZZp(v)
 *     elif v is not None:
 */
    goto __pyx_L3;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":52
 *     if isinstance(v, int):
 *         result = intToZZp(v)
 *     elif v is not None:             # <<<<<<<<<<<<<<
 *         ccreadstr(result, v)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_v != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":53
 *         result = intToZZp(v)
 *     elif v is not None:
 *         ccreadstr(result, v)             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(f"Unsupported data type. {type(v)}")
 */
    __pyx_t_3 = ccreadstr<ZZ_p>(__pyx_v_result, __pyx_v_v); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 53, __pyx_L1_error)

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":52
 *     if isinstance(v, int):
 *         result = intToZZp(v)
 *     elif v is not None:             # <<<<<<<<<<<<<<
 *         ccreadstr(result, v)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":55
 *         ccreadstr(result, v)
 *     else:
 *         raise ValueError(f"Unsupported data type. {type(v)}")             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_v)), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unsupported_data_type, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 55, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":57
 *         raise ValueError(f"Unsupported data type. {type(v)}")
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef vec_ZZ_p py_list_to_vec_ZZ_p(object v):
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":48
 *     return result
 * 
 * cdef ZZ_p py_obj_to_ZZ_p(object v):             # <<<<<<<<<<<<<<
 *     cdef ZZ_p result
 *     if isinstance(v, int):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("honeybadgermpc.ntl._hbmpc_ntl_helpers.py_obj_to_ZZ_p", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":59
 *     return result
 * 
 * cdef vec_ZZ_p py_list_to_vec_ZZ_p(object v):             # <<<<<<<<<<<<<<
 *     cdef vec_ZZ_p result
 *     if not isinstance(v, list) and not isinstance(v, tuple):
 */

static vec_ZZ_p __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_list_to_vec_ZZ_p(PyObject *__pyx_v_v) {
  vec_ZZ_p __pyx_v_result;
  int __pyx_v_i;
  vec_ZZ_p __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("py_list_to_vec_ZZ_p", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":61
 * cdef vec_ZZ_p py_list_to_vec_ZZ_p(object v):
 *     cdef vec_ZZ_p result
 *     if not isinstance(v, list) and not isinstance(v, tuple):             # <<<<<<<<<<<<<<
 *         raise ValueError("Invalid arguments")
 * 
 */
  __pyx_t_2 = PyList_Check(__pyx_v_v); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyTuple_Check(__pyx_v_v); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":62
 *     cdef vec_ZZ_p result
 *     if not isinstance(v, list) and not isinstance(v, tuple):
 *         raise ValueError("Invalid arguments")             # <<<<<<<<<<<<<<
 * 
 *     result.SetLength(len(v))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 62, __pyx_L1_error)

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":61
 * cdef vec_ZZ_p py_list_to_vec_ZZ_p(object v):
 *     cdef vec_ZZ_p result
 *     if not isinstance(v, list) and not isinstance(v, tuple):             # <<<<<<<<<<<<<<
 *         raise ValueError("Invalid arguments")
 * 
 */
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":64
 *         raise ValueError("Invalid arguments")
 * 
 *     result.SetLength(len(v))             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(len(v)):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_v); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_v_result.SetLength(__pyx_t_5);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":66
 *     result.SetLength(len(v))
 *     cdef int i
 *     for i in range(len(v)):             # <<<<<<<<<<<<<<
 *         result[i] = intToZZp(v[i])
 *     return result
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_v); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":67
 *     cdef int i
 *     for i in range(len(v)):
 *         result[i] = intToZZp(v[i])             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_v, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    (__pyx_v_result[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":68
 *     for i in range(len(v)):
 *         result[i] = intToZZp(v[i])
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef str ZZ_to_str(ZZ x):
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":59
 *     return result
 * 
 * cdef vec_ZZ_p py_list_to_vec_ZZ_p(object v):             # <<<<<<<<<<<<<<
 *     cdef vec_ZZ_p result
 *     if not isinstance(v, list) and not isinstance(v, tuple):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("honeybadgermpc.ntl._hbmpc_ntl_helpers.py_list_to_vec_ZZ_p", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":70
 *     return result
 * 
 * cdef str ZZ_to_str(ZZ x):             # <<<<<<<<<<<<<<
 *     return ccrepr(x)
 * 
 */

static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZ_to_str(ZZ __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ZZ_to_str", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":71
 * 
 * cdef str ZZ_to_str(ZZ x):
 *     return ccrepr(x)             # <<<<<<<<<<<<<<
 * 
 * cpdef lagrange_interpolate(x, y, modulus):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ccrepr<ZZ>(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":70
 *     return result
 * 
 * cdef str ZZ_to_str(ZZ x):             # <<<<<<<<<<<<<<
 *     return ccrepr(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.ZZ_to_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":73
 *     return ccrepr(x)
 * 
 * cpdef lagrange_interpolate(x, y, modulus):             # <<<<<<<<<<<<<<
 *     """Interpolate polynomial P s.t. P(x[i]) = y[i]
 *     :param x: Evaluation points for polynomial
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_1lagrange_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate(PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_modulus, CYTHON_UNUSED int __pyx_skip_dispatch) {
  std::vector<ZZ>  __pyx_v_x_vec;
  std::vector<ZZ>  __pyx_v_y_vec;
  std::vector<ZZ>  __pyx_v_r_vec;
  std::vector<ZZ> ::size_type __pyx_v_i;
  ZZ __pyx_v_zz_modulus;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  std::vector<ZZ> ::size_type __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::vector<ZZ> ::size_type __pyx_t_5;
  std::vector<ZZ> ::size_type __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("lagrange_interpolate", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":83
 *     :return:
 *     """
 *     assert len(x) == len(y)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[ZZ] x_vec;
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 83, __pyx_L1_error)
    __pyx_t_2 = PyObject_Length(__pyx_v_y); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 83, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == __pyx_t_2) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 83, __pyx_L1_error)
    }
  }
  #endif

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":89
 *     cdef vector[ZZ] r_vec;
 * 
 *     for i in range(len(x)):             # <<<<<<<<<<<<<<
 *         x_vec.push_back(py_obj_to_ZZ(x[i]))
 *         y_vec.push_back(py_obj_to_ZZ(y[i]))
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":90
 * 
 *     for i in range(len(x)):
 *         x_vec.push_back(py_obj_to_ZZ(x[i]))             # <<<<<<<<<<<<<<
 *         y_vec.push_back(py_obj_to_ZZ(y[i]))
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, std::vector<ZZ> ::size_type, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    try {
      __pyx_v_x_vec.push_back(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_t_4));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 90, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":91
 *     for i in range(len(x)):
 *         x_vec.push_back(py_obj_to_ZZ(x[i]))
 *         y_vec.push_back(py_obj_to_ZZ(y[i]))             # <<<<<<<<<<<<<<
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_y, __pyx_v_i, std::vector<ZZ> ::size_type, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    try {
      __pyx_v_y_vec.push_back(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_t_4));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 91, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":93
 *         y_vec.push_back(py_obj_to_ZZ(y[i]))
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)             # <<<<<<<<<<<<<<
 *     interpolate_c(r_vec, x_vec, y_vec, zz_modulus)
 * 
 */
  __pyx_v_zz_modulus = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_v_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":94
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 *     interpolate_c(r_vec, x_vec, y_vec, zz_modulus)             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  interpolate(__pyx_v_r_vec, __pyx_v_x_vec, __pyx_v_y_vec, __pyx_v_zz_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":96
 *     interpolate_c(r_vec, x_vec, y_vec, zz_modulus)
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     for i in range(r_vec.size()):
 *         result.append(int(ZZ_to_str(r_vec[i])))
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":97
 * 
 *     result = []
 *     for i in range(r_vec.size()):             # <<<<<<<<<<<<<<
 *         result.append(int(ZZ_to_str(r_vec[i])))
 *     return result
 */
  __pyx_t_3 = __pyx_v_r_vec.size();
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":98
 *     result = []
 *     for i in range(r_vec.size()):
 *         result.append(int(ZZ_to_str(r_vec[i])))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_4 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZ_to_str((__pyx_v_r_vec[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":99
 *     for i in range(r_vec.size()):
 *         result.append(int(ZZ_to_str(r_vec[i])))
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef evaluate(polynomial, x, modulus):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":73
 *     return ccrepr(x)
 * 
 * cpdef lagrange_interpolate(x, y, modulus):             # <<<<<<<<<<<<<<
 *     """Interpolate polynomial P s.t. P(x[i]) = y[i]
 *     :param x: Evaluation points for polynomial
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.lagrange_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_1lagrange_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate[] = "Interpolate polynomial P s.t. P(x[i]) = y[i]\n    :param x: Evaluation points for polynomial\n    :type x: list of integers\n    :param y: Evaluation of polynomial\n    :type y: list of integers\n    :param modulus: Field modulus\n    :type modulus: integer\n    :return:\n    ";
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_1lagrange_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_modulus = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lagrange_interpolate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_modulus,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lagrange_interpolate", 1, 3, 3, 1); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lagrange_interpolate", 1, 3, 3, 2); __PYX_ERR(0, 73, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lagrange_interpolate") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_modulus = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lagrange_interpolate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.lagrange_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_modulus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_modulus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lagrange_interpolate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate(__pyx_v_x, __pyx_v_y, __pyx_v_modulus, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.lagrange_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":101
 *     return result
 * 
 * cpdef evaluate(polynomial, x, modulus):             # <<<<<<<<<<<<<<
 *     """Evaluate polynomial at x"""
 *     cdef ZZ_pX_c poly
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_3evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_evaluate(PyObject *__pyx_v_polynomial, PyObject *__pyx_v_x, PyObject *__pyx_v_modulus, CYTHON_UNUSED int __pyx_skip_dispatch) {
  ZZ_pX __pyx_v_poly;
  ZZ_p __pyx_v_y;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":107
 *     cdef int i
 * 
 *     ZZ_p_init(py_obj_to_ZZ(modulus))             # <<<<<<<<<<<<<<
 *     poly.SetMaxLength(len(polynomial))
 *     for i in range(len(polynomial)):
 */
  ZZ_p::init(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_v_modulus));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":108
 * 
 *     ZZ_p_init(py_obj_to_ZZ(modulus))
 *     poly.SetMaxLength(len(polynomial))             # <<<<<<<<<<<<<<
 *     for i in range(len(polynomial)):
 *         ZZ_pX_set_coeff(poly, i, intToZZp(polynomial[i]))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_polynomial); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_v_poly.SetMaxLength(__pyx_t_1);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":109
 *     ZZ_p_init(py_obj_to_ZZ(modulus))
 *     poly.SetMaxLength(len(polynomial))
 *     for i in range(len(polynomial)):             # <<<<<<<<<<<<<<
 *         ZZ_pX_set_coeff(poly, i, intToZZp(polynomial[i]))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_polynomial); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":110
 *     poly.SetMaxLength(len(polynomial))
 *     for i in range(len(polynomial)):
 *         ZZ_pX_set_coeff(poly, i, intToZZp(polynomial[i]))             # <<<<<<<<<<<<<<
 * 
 *     ZZ_pX_eval(y, poly, intToZZp(x))
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_polynomial, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    SetCoeff(__pyx_v_poly, __pyx_v_i, __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":112
 *         ZZ_pX_set_coeff(poly, i, intToZZp(polynomial[i]))
 * 
 *     ZZ_pX_eval(y, poly, intToZZp(x))             # <<<<<<<<<<<<<<
 *     return int(ccrepr(y))
 * 
 */
  eval(__pyx_v_y, __pyx_v_poly, __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_x));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":113
 * 
 *     ZZ_pX_eval(y, poly, intToZZp(x))
 *     return int(ccrepr(y))             # <<<<<<<<<<<<<<
 * 
 * cpdef vandermonde_inverse(x, modulus):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ccrepr<ZZ_p>(__pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":101
 *     return result
 * 
 * cpdef evaluate(polynomial, x, modulus):             # <<<<<<<<<<<<<<
 *     """Evaluate polynomial at x"""
 *     cdef ZZ_pX_c poly
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_3evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_2evaluate[] = "Evaluate polynomial at x";
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_3evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_polynomial = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_modulus = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_polynomial,&__pyx_n_s_x,&__pyx_n_s_modulus,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polynomial)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate", 1, 3, 3, 1); __PYX_ERR(0, 101, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate", 1, 3, 3, 2); __PYX_ERR(0, 101, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate") < 0)) __PYX_ERR(0, 101, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_polynomial = values[0];
    __pyx_v_x = values[1];
    __pyx_v_modulus = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 101, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_2evaluate(__pyx_self, __pyx_v_polynomial, __pyx_v_x, __pyx_v_modulus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_2evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_polynomial, PyObject *__pyx_v_x, PyObject *__pyx_v_modulus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_evaluate(__pyx_v_polynomial, __pyx_v_x, __pyx_v_modulus, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":115
 *     return int(ccrepr(y))
 * 
 * cpdef vandermonde_inverse(x, modulus):             # <<<<<<<<<<<<<<
 *     """Generate inverse of vandermonde matrix
 *     :param x: Evaluation points for polynomial
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_5vandermonde_inverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_inverse(PyObject *__pyx_v_x, PyObject *__pyx_v_modulus, CYTHON_UNUSED int __pyx_skip_dispatch) {
  std::vector<ZZ>  __pyx_v_x_vec;
  PyObject *__pyx_v_xi = NULL;
  ZZ __pyx_v_zz_modulus;
  mat_ZZ_p __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("vandermonde_inverse", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":125
 *     cdef vector[ZZ] x_vec;
 * 
 *     for xi in x:             # <<<<<<<<<<<<<<
 *         x_vec.push_back(py_obj_to_ZZ(xi))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_x)) || PyTuple_CheckExact(__pyx_v_x)) {
    __pyx_t_1 = __pyx_v_x; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 125, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":126
 * 
 *     for xi in x:
 *         x_vec.push_back(py_obj_to_ZZ(xi))             # <<<<<<<<<<<<<<
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 */
    try {
      __pyx_v_x_vec.push_back(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_v_xi));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 126, __pyx_L1_error)
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":125
 *     cdef vector[ZZ] x_vec;
 * 
 *     for xi in x:             # <<<<<<<<<<<<<<
 *         x_vec.push_back(py_obj_to_ZZ(xi))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":128
 *         x_vec.push_back(py_obj_to_ZZ(xi))
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)             # <<<<<<<<<<<<<<
 *     cdef mat_ZZ_p r
 *     vandermonde_inverse_c(r, x_vec, zz_modulus)
 */
  __pyx_v_zz_modulus = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_v_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":130
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 *     cdef mat_ZZ_p r
 *     vandermonde_inverse_c(r, x_vec, zz_modulus)             # <<<<<<<<<<<<<<
 * 
 *     return ccrepr(r)
 */
  (void)(vandermonde_inverse(__pyx_v_r, __pyx_v_x_vec, __pyx_v_zz_modulus));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":132
 *     vandermonde_inverse_c(r, x_vec, zz_modulus)
 * 
 *     return ccrepr(r)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ccrepr<mat_ZZ_p>(__pyx_v_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":115
 *     return int(ccrepr(y))
 * 
 * cpdef vandermonde_inverse(x, modulus):             # <<<<<<<<<<<<<<
 *     """Generate inverse of vandermonde matrix
 *     :param x: Evaluation points for polynomial
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_5vandermonde_inverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_4vandermonde_inverse[] = "Generate inverse of vandermonde matrix\n    :param x: Evaluation points for polynomial\n    :type x: list of integers\n    :param modulus: Field modulus\n    :type modulus: integers\n    :return:\n    ";
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_5vandermonde_inverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_modulus = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vandermonde_inverse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_modulus,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vandermonde_inverse", 1, 2, 2, 1); __PYX_ERR(0, 115, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "vandermonde_inverse") < 0)) __PYX_ERR(0, 115, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_modulus = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("vandermonde_inverse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_4vandermonde_inverse(__pyx_self, __pyx_v_x, __pyx_v_modulus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_4vandermonde_inverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_modulus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("vandermonde_inverse", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_inverse(__pyx_v_x, __pyx_v_modulus, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":139
 * 
 * 
 * cpdef vandermonde_batch_interpolate(x, data_list, modulus):             # <<<<<<<<<<<<<<
 *     """Interpolate polynomials using vandermonde matrices
 * 
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_7vandermonde_batch_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_batch_interpolate(PyObject *__pyx_v_x, PyObject *__pyx_v_data_list, PyObject *__pyx_v_modulus, CYTHON_UNUSED int __pyx_skip_dispatch) {
  std::vector<ZZ>  __pyx_v_x_vec;
  PyObject *__pyx_v_xi = NULL;
  ZZ __pyx_v_zz_modulus;
  mat_ZZ_p __pyx_v_r;
  PyObject *__pyx_v_d = NULL;
  mat_ZZ_p __pyx_v_m;
  int __pyx_v_k;
  int __pyx_v_n_chunks;
  int __pyx_v_i;
  Py_ssize_t __pyx_v_l;
  Py_ssize_t __pyx_v_j;
  mat_ZZ_p __pyx_v_reconstructions;
  PyObject *__pyx_v_polynomials = NULL;
  CYTHON_UNUSED int __pyx_v__;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("vandermonde_batch_interpolate", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":162
 *     cdef vector[ZZ] x_vec;
 * 
 *     for xi in x:             # <<<<<<<<<<<<<<
 *         x_vec.push_back(py_obj_to_ZZ(xi))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_x)) || PyTuple_CheckExact(__pyx_v_x)) {
    __pyx_t_1 = __pyx_v_x; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 162, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_xi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":163
 * 
 *     for xi in x:
 *         x_vec.push_back(py_obj_to_ZZ(xi))             # <<<<<<<<<<<<<<
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 */
    try {
      __pyx_v_x_vec.push_back(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_v_xi));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 163, __pyx_L1_error)
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":162
 *     cdef vector[ZZ] x_vec;
 * 
 *     for xi in x:             # <<<<<<<<<<<<<<
 *         x_vec.push_back(py_obj_to_ZZ(xi))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":165
 *         x_vec.push_back(py_obj_to_ZZ(xi))
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)             # <<<<<<<<<<<<<<
 *     cdef mat_ZZ_p r
 *     d = vandermonde_inverse_c(r, x_vec, zz_modulus)
 */
  __pyx_v_zz_modulus = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_v_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":167
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 *     cdef mat_ZZ_p r
 *     d = vandermonde_inverse_c(r, x_vec, zz_modulus)             # <<<<<<<<<<<<<<
 *     if d is False:
 *         raise InterpolationError("Interpolation failed")
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(vandermonde_inverse(__pyx_v_r, __pyx_v_x_vec, __pyx_v_zz_modulus)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":168
 *     cdef mat_ZZ_p r
 *     d = vandermonde_inverse_c(r, x_vec, zz_modulus)
 *     if d is False:             # <<<<<<<<<<<<<<
 *         raise InterpolationError("Interpolation failed")
 * 
 */
  __pyx_t_5 = (__pyx_v_d == Py_False);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":169
 *     d = vandermonde_inverse_c(r, x_vec, zz_modulus)
 *     if d is False:
 *         raise InterpolationError("Interpolation failed")             # <<<<<<<<<<<<<<
 * 
 *     cdef mat_ZZ_p m
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_InterpolationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_kp_s_Interpolation_failed) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Interpolation_failed);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 169, __pyx_L1_error)

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":168
 *     cdef mat_ZZ_p r
 *     d = vandermonde_inverse_c(r, x_vec, zz_modulus)
 *     if d is False:             # <<<<<<<<<<<<<<
 *         raise InterpolationError("Interpolation failed")
 * 
 */
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":172
 * 
 *     cdef mat_ZZ_p m
 *     cdef int k = max([len(d) for d in data_list])             # <<<<<<<<<<<<<<
 *     cdef int n_chunks = len(data_list)
 *     m.SetDims(k, n_chunks)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_data_list)) || PyTuple_CheckExact(__pyx_v_data_list)) {
    __pyx_t_4 = __pyx_v_data_list; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_data_list); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_3(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 172, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_DECREF_SET(__pyx_v_d, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_8 = PyObject_Length(__pyx_v_d); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 172, __pyx_L1_error)
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_k = __pyx_t_9;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":173
 *     cdef mat_ZZ_p m
 *     cdef int k = max([len(d) for d in data_list])
 *     cdef int n_chunks = len(data_list)             # <<<<<<<<<<<<<<
 *     m.SetDims(k, n_chunks)
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_data_list); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_v_n_chunks = __pyx_t_2;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":174
 *     cdef int k = max([len(d) for d in data_list])
 *     cdef int n_chunks = len(data_list)
 *     m.SetDims(k, n_chunks)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_chunks):
 */
  __pyx_v_m.SetDims(__pyx_v_k, __pyx_v_n_chunks);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":176
 *     m.SetDims(k, n_chunks)
 * 
 *     for i in range(n_chunks):             # <<<<<<<<<<<<<<
 *         l = len(data_list[i])
 *         for j in range(l):
 */
  __pyx_t_9 = __pyx_v_n_chunks;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":177
 * 
 *     for i in range(n_chunks):
 *         l = len(data_list[i])             # <<<<<<<<<<<<<<
 *         for j in range(l):
 *             m[j][i] = intToZZp(data_list[i][j])
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_data_list, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_l = __pyx_t_2;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":178
 *     for i in range(n_chunks):
 *         l = len(data_list[i])
 *         for j in range(l):             # <<<<<<<<<<<<<<
 *             m[j][i] = intToZZp(data_list[i][j])
 *         for j in range(l, k):
 */
    __pyx_t_2 = __pyx_v_l;
    __pyx_t_8 = __pyx_t_2;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_8; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":179
 *         l = len(data_list[i])
 *         for j in range(l):
 *             m[j][i] = intToZZp(data_list[i][j])             # <<<<<<<<<<<<<<
 *         for j in range(l, k):
 *             m[j][i] = intToZZp(0)
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_data_list, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      ((__pyx_v_m[__pyx_v_j])[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":180
 *         for j in range(l):
 *             m[j][i] = intToZZp(data_list[i][j])
 *         for j in range(l, k):             # <<<<<<<<<<<<<<
 *             m[j][i] = intToZZp(0)
 *     cdef mat_ZZ_p reconstructions
 */
    __pyx_t_13 = __pyx_v_k;
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_2 = __pyx_v_l; __pyx_t_2 < __pyx_t_14; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":181
 *             m[j][i] = intToZZp(data_list[i][j])
 *         for j in range(l, k):
 *             m[j][i] = intToZZp(0)             # <<<<<<<<<<<<<<
 *     cdef mat_ZZ_p reconstructions
 *     mat_ZZ_p_mul(reconstructions, r, m)
 */
      ((__pyx_v_m[__pyx_v_j])[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_int_0);
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":183
 *             m[j][i] = intToZZp(0)
 *     cdef mat_ZZ_p reconstructions
 *     mat_ZZ_p_mul(reconstructions, r, m)             # <<<<<<<<<<<<<<
 * 
 *     polynomials = [[None] * k for _ in range(n_chunks)]
 */
  mul(__pyx_v_reconstructions, __pyx_v_r, __pyx_v_m);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":185
 *     mat_ZZ_p_mul(reconstructions, r, m)
 * 
 *     polynomials = [[None] * k for _ in range(n_chunks)]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_chunks):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __pyx_v_n_chunks;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v__ = __pyx_t_11;
    __pyx_t_4 = PyList_New(1 * ((__pyx_v_k<0) ? 0:__pyx_v_k)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_k; __pyx_temp++) {
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyList_SET_ITEM(__pyx_t_4, __pyx_temp, Py_None);
      }
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_polynomials = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":187
 *     polynomials = [[None] * k for _ in range(n_chunks)]
 * 
 *     for i in range(n_chunks):             # <<<<<<<<<<<<<<
 *         for j in range(k):
 *             polynomials[i][j] = 0
 */
  __pyx_t_9 = __pyx_v_n_chunks;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":188
 * 
 *     for i in range(n_chunks):
 *         for j in range(k):             # <<<<<<<<<<<<<<
 *             polynomials[i][j] = 0
 * 
 */
    __pyx_t_13 = __pyx_v_k;
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_14; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":189
 *     for i in range(n_chunks):
 *         for j in range(k):
 *             polynomials[i][j] = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_chunks):
 */
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_polynomials, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_1, __pyx_v_j, __pyx_int_0, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":191
 *             polynomials[i][j] = 0
 * 
 *     for i in range(n_chunks):             # <<<<<<<<<<<<<<
 *         for j in range(k):
 *             polynomials[i][j] = ZZpToInt(reconstructions[j][i])
 */
  __pyx_t_9 = __pyx_v_n_chunks;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":192
 * 
 *     for i in range(n_chunks):
 *         for j in range(k):             # <<<<<<<<<<<<<<
 *             polynomials[i][j] = ZZpToInt(reconstructions[j][i])
 *     reconstructions.kill()
 */
    __pyx_t_13 = __pyx_v_k;
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_14; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":193
 *     for i in range(n_chunks):
 *         for j in range(k):
 *             polynomials[i][j] = ZZpToInt(reconstructions[j][i])             # <<<<<<<<<<<<<<
 *     reconstructions.kill()
 *     m.kill()
 */
      __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt(((__pyx_v_reconstructions[__pyx_v_j])[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_polynomials, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_j, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":194
 *         for j in range(k):
 *             polynomials[i][j] = ZZpToInt(reconstructions[j][i])
 *     reconstructions.kill()             # <<<<<<<<<<<<<<
 *     m.kill()
 *     r.kill()
 */
  __pyx_v_reconstructions.kill();

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":195
 *             polynomials[i][j] = ZZpToInt(reconstructions[j][i])
 *     reconstructions.kill()
 *     m.kill()             # <<<<<<<<<<<<<<
 *     r.kill()
 *     return polynomials
 */
  __pyx_v_m.kill();

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":196
 *     reconstructions.kill()
 *     m.kill()
 *     r.kill()             # <<<<<<<<<<<<<<
 *     return polynomials
 * 
 */
  __pyx_v_r.kill();

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":197
 *     m.kill()
 *     r.kill()
 *     return polynomials             # <<<<<<<<<<<<<<
 * 
 * cpdef vandermonde_batch_evaluate(x, polynomials, modulus):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_polynomials);
  __pyx_r = __pyx_v_polynomials;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":139
 * 
 * 
 * cpdef vandermonde_batch_interpolate(x, data_list, modulus):             # <<<<<<<<<<<<<<
 *     """Interpolate polynomials using vandermonde matrices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_batch_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xi);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_polynomials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_7vandermonde_batch_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_6vandermonde_batch_interpolate[] = "Interpolate polynomials using vandermonde matrices\n\n    This code is based on the observation that we have evaluations for different\n    polynomials P0, P1, etc on the same set of points x[0], x[1], .., x[k]\n\n    We first generate the vandermonde matrix `A`\n    https://en.wikipedia.org/wiki/Vandermonde_matrix\n\n    More on the math behind this here\n    http://pages.cs.wisc.edu/~sifakis/courses/cs412-s13/lecture_notes/CS412_12_Feb_2013.pdf\n\n    :param x: list of evaluation points\n    :type x: list of integers\n    :param data_list: evaluations of polynomials\n                      data_list[i][j] = evaluation of polynomial i at point x[j]\n    :type data_list: list of lists\n    :param modulus: field modulus\n    :type modulus: integer\n    :return:\n    ";
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_7vandermonde_batch_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_data_list = 0;
  PyObject *__pyx_v_modulus = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vandermonde_batch_interpolate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_data_list,&__pyx_n_s_modulus,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vandermonde_batch_interpolate", 1, 3, 3, 1); __PYX_ERR(0, 139, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vandermonde_batch_interpolate", 1, 3, 3, 2); __PYX_ERR(0, 139, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "vandermonde_batch_interpolate") < 0)) __PYX_ERR(0, 139, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = values[0];
    __pyx_v_data_list = values[1];
    __pyx_v_modulus = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("vandermonde_batch_interpolate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 139, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_batch_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_6vandermonde_batch_interpolate(__pyx_self, __pyx_v_x, __pyx_v_data_list, __pyx_v_modulus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_6vandermonde_batch_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_data_list, PyObject *__pyx_v_modulus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("vandermonde_batch_interpolate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_batch_interpolate(__pyx_v_x, __pyx_v_data_list, __pyx_v_modulus, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_batch_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":199
 *     return polynomials
 * 
 * cpdef vandermonde_batch_evaluate(x, polynomials, modulus):             # <<<<<<<<<<<<<<
 *     """Evaluate polynomials at given points x using vandermonde matrices
 * 
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_9vandermonde_batch_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_batch_evaluate(PyObject *__pyx_v_x, PyObject *__pyx_v_polynomials, PyObject *__pyx_v_modulus, CYTHON_UNUSED int __pyx_skip_dispatch) {
  mat_ZZ_p __pyx_v_vm_matrix;
  mat_ZZ_p __pyx_v_poly_matrix;
  mat_ZZ_p __pyx_v_res_matrix;
  int __pyx_v_n;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_d;
  ZZ __pyx_v_zz_modulus;
  vec_ZZ_p __pyx_v_x_vec;
  Py_ssize_t __pyx_v_l;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_poly = NULL;
  CYTHON_UNUSED int __pyx_v__;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("vandermonde_batch_evaluate", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":212
 *     """
 *     cdef mat_ZZ_p vm_matrix, poly_matrix, res_matrix
 *     cdef int n = len(x)             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     # Number of chunks
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":215
 *     cdef int i, j
 *     # Number of chunks
 *     cdef int k = len(polynomials)             # <<<<<<<<<<<<<<
 *     # Degree of polynomial. Actually number of coefficients.
 *     cdef int d = max([len(poly) for poly in polynomials])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_polynomials); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_v_k = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":217
 *     cdef int k = len(polynomials)
 *     # Degree of polynomial. Actually number of coefficients.
 *     cdef int d = max([len(poly) for poly in polynomials])             # <<<<<<<<<<<<<<
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_v_polynomials)) || PyTuple_CheckExact(__pyx_v_polynomials)) {
    __pyx_t_3 = __pyx_v_polynomials; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_polynomials); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 217, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 217, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_poly, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_6 = PyObject_Length(__pyx_v_poly); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 217, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_d = __pyx_t_7;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":219
 *     cdef int d = max([len(poly) for poly in polynomials])
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)             # <<<<<<<<<<<<<<
 *     ZZ_p_init(zz_modulus)
 * 
 */
  __pyx_v_zz_modulus = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_obj_to_ZZ(__pyx_v_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":220
 * 
 *     cdef ZZ zz_modulus = py_obj_to_ZZ(modulus)
 *     ZZ_p_init(zz_modulus)             # <<<<<<<<<<<<<<
 * 
 *     # Set vm_matrix
 */
  ZZ_p::init(__pyx_v_zz_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":223
 * 
 *     # Set vm_matrix
 *     cdef vec_ZZ_p x_vec = py_list_to_vec_ZZ_p(x)             # <<<<<<<<<<<<<<
 *     set_vm_matrix_c(vm_matrix, x_vec, d)
 * 
 */
  __pyx_v_x_vec = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_py_list_to_vec_ZZ_p(__pyx_v_x);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":224
 *     # Set vm_matrix
 *     cdef vec_ZZ_p x_vec = py_list_to_vec_ZZ_p(x)
 *     set_vm_matrix_c(vm_matrix, x_vec, d)             # <<<<<<<<<<<<<<
 * 
 *     # Set matrix with polynomial coefficients
 */
  set_vm_matrix(__pyx_v_vm_matrix, __pyx_v_x_vec, __pyx_v_d);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":227
 * 
 *     # Set matrix with polynomial coefficients
 *     poly_matrix.SetDims(d, k)             # <<<<<<<<<<<<<<
 *     for i in range(k):
 *         l = len(polynomials[i])
 */
  __pyx_v_poly_matrix.SetDims(__pyx_v_d, __pyx_v_k);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":228
 *     # Set matrix with polynomial coefficients
 *     poly_matrix.SetDims(d, k)
 *     for i in range(k):             # <<<<<<<<<<<<<<
 *         l = len(polynomials[i])
 *         for j in range(l):
 */
  __pyx_t_7 = __pyx_v_k;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":229
 *     poly_matrix.SetDims(d, k)
 *     for i in range(k):
 *         l = len(polynomials[i])             # <<<<<<<<<<<<<<
 *         for j in range(l):
 *             poly_matrix[j][i] = intToZZp(polynomials[i][j])
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_polynomials, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_l = __pyx_t_1;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":230
 *     for i in range(k):
 *         l = len(polynomials[i])
 *         for j in range(l):             # <<<<<<<<<<<<<<
 *             poly_matrix[j][i] = intToZZp(polynomials[i][j])
 *         for j in range(l, d):
 */
    __pyx_t_1 = __pyx_v_l;
    __pyx_t_6 = __pyx_t_1;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_6; __pyx_t_10+=1) {
      __pyx_v_j = __pyx_t_10;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":231
 *         l = len(polynomials[i])
 *         for j in range(l):
 *             poly_matrix[j][i] = intToZZp(polynomials[i][j])             # <<<<<<<<<<<<<<
 *         for j in range(l, d):
 *             poly_matrix[j][i] = intToZZp(0)
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_polynomials, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      ((__pyx_v_poly_matrix[__pyx_v_j])[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":232
 *         for j in range(l):
 *             poly_matrix[j][i] = intToZZp(polynomials[i][j])
 *         for j in range(l, d):             # <<<<<<<<<<<<<<
 *             poly_matrix[j][i] = intToZZp(0)
 * 
 */
    __pyx_t_10 = __pyx_v_d;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = __pyx_v_l; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":233
 *             poly_matrix[j][i] = intToZZp(polynomials[i][j])
 *         for j in range(l, d):
 *             poly_matrix[j][i] = intToZZp(0)             # <<<<<<<<<<<<<<
 * 
 *     # Finally multiply matrices. This gives evaluation of polynomials at
 */
      ((__pyx_v_poly_matrix[__pyx_v_j])[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_int_0);
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":237
 *     # Finally multiply matrices. This gives evaluation of polynomials at
 *     # all points chosen
 *     mat_ZZ_p_mul(res_matrix, vm_matrix, poly_matrix)             # <<<<<<<<<<<<<<
 * 
 *     # Convert back to python friendly formats
 */
  mul(__pyx_v_res_matrix, __pyx_v_vm_matrix, __pyx_v_poly_matrix);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":240
 * 
 *     # Convert back to python friendly formats
 *     result = [[None] * n for _ in range(k)]             # <<<<<<<<<<<<<<
 *     for i in range(n):
 *         for j in range(k):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_v_k;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v__ = __pyx_t_9;
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_n<0) ? 0:__pyx_v_n)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_n; __pyx_temp++) {
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, Py_None);
      }
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":241
 *     # Convert back to python friendly formats
 *     result = [[None] * n for _ in range(k)]
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         for j in range(k):
 *             result[j][i] = ZZpToInt(res_matrix[i][j])
 */
  __pyx_t_7 = __pyx_v_n;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":242
 *     result = [[None] * n for _ in range(k)]
 *     for i in range(n):
 *         for j in range(k):             # <<<<<<<<<<<<<<
 *             result[j][i] = ZZpToInt(res_matrix[i][j])
 *     return result
 */
    __pyx_t_10 = __pyx_v_k;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":243
 *     for i in range(n):
 *         for j in range(k):
 *             result[j][i] = ZZpToInt(res_matrix[i][j])             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
      __pyx_t_2 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt(((__pyx_v_res_matrix[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_result, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":244
 *         for j in range(k):
 *             result[j][i] = ZZpToInt(res_matrix[i][j])
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef fft(coeffs, omega, modulus, int n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":199
 *     return polynomials
 * 
 * cpdef vandermonde_batch_evaluate(x, polynomials, modulus):             # <<<<<<<<<<<<<<
 *     """Evaluate polynomials at given points x using vandermonde matrices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_batch_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_poly);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_9vandermonde_batch_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_8vandermonde_batch_evaluate[] = "Evaluate polynomials at given points x using vandermonde matrices\n\n    :param x: evaluation points\n    :type x: list of integers\n    :param polynomials: polynomial coefficients. polynomials[i] = coefficients of the\n        i'th polynomial\n    :type x: list of list of integers\n    :param modulus: field modulus\n    :type modulus: integer\n    :return:\n    ";
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_9vandermonde_batch_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_polynomials = 0;
  PyObject *__pyx_v_modulus = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vandermonde_batch_evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_polynomials,&__pyx_n_s_modulus,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polynomials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vandermonde_batch_evaluate", 1, 3, 3, 1); __PYX_ERR(0, 199, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("vandermonde_batch_evaluate", 1, 3, 3, 2); __PYX_ERR(0, 199, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "vandermonde_batch_evaluate") < 0)) __PYX_ERR(0, 199, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = values[0];
    __pyx_v_polynomials = values[1];
    __pyx_v_modulus = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("vandermonde_batch_evaluate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 199, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_batch_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_8vandermonde_batch_evaluate(__pyx_self, __pyx_v_x, __pyx_v_polynomials, __pyx_v_modulus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_8vandermonde_batch_evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_polynomials, PyObject *__pyx_v_modulus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("vandermonde_batch_evaluate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_vandermonde_batch_evaluate(__pyx_v_x, __pyx_v_polynomials, __pyx_v_modulus, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.vandermonde_batch_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":246
 *     return result
 * 
 * cpdef fft(coeffs, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i, d;
 *     cdef vec_ZZ_p coeffs_vec, result_vec;
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_11fft(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_fft(PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_d;
  vec_ZZ_p __pyx_v_coeffs_vec;
  vec_ZZ_p __pyx_v_result_vec;
  ZZ_p __pyx_v_zz_omega;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("fft", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":250
 *     cdef vec_ZZ_p coeffs_vec, result_vec;
 * 
 *     ZZ_p_init(intToZZ(modulus))             # <<<<<<<<<<<<<<
 * 
 *     d = len(coeffs)
 */
  ZZ_p::init(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_modulus));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":252
 *     ZZ_p_init(intToZZ(modulus))
 * 
 *     d = len(coeffs)             # <<<<<<<<<<<<<<
 *     coeffs_vec.SetLength(d)
 *     for i in range(d):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_v_d = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":253
 * 
 *     d = len(coeffs)
 *     coeffs_vec.SetLength(d)             # <<<<<<<<<<<<<<
 *     for i in range(d):
 *         coeffs_vec[i] = intToZZp(coeffs[i])
 */
  __pyx_v_coeffs_vec.SetLength(__pyx_v_d);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":254
 *     d = len(coeffs)
 *     coeffs_vec.SetLength(d)
 *     for i in range(d):             # <<<<<<<<<<<<<<
 *         coeffs_vec[i] = intToZZp(coeffs[i])
 * 
 */
  __pyx_t_2 = __pyx_v_d;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":255
 *     coeffs_vec.SetLength(d)
 *     for i in range(d):
 *         coeffs_vec[i] = intToZZp(coeffs[i])             # <<<<<<<<<<<<<<
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    (__pyx_v_coeffs_vec[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":257
 *         coeffs_vec[i] = intToZZp(coeffs[i])
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)             # <<<<<<<<<<<<<<
 *     fft_c(result_vec, coeffs_vec, zz_omega, n)
 * 
 */
  __pyx_v_zz_omega = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_omega);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":258
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 *     fft_c(result_vec, coeffs_vec, zz_omega, n)             # <<<<<<<<<<<<<<
 * 
 *     result = [None] * n
 */
  fft(__pyx_v_result_vec, __pyx_v_coeffs_vec, __pyx_v_zz_omega, __pyx_v_n);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":260
 *     fft_c(result_vec, coeffs_vec, zz_omega, n)
 * 
 *     result = [None] * n             # <<<<<<<<<<<<<<
 *     for i in range(n):
 *         result[i] = ZZpToInt(result_vec[i])
 */
  __pyx_t_5 = PyList_New(1 * ((__pyx_v_n<0) ? 0:__pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_n; __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_5, __pyx_temp, Py_None);
    }
  }
  __pyx_v_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":261
 * 
 *     result = [None] * n
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         result[i] = ZZpToInt(result_vec[i])
 * 
 */
  __pyx_t_2 = __pyx_v_n;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":262
 *     result = [None] * n
 *     for i in range(n):
 *         result[i] = ZZpToInt(result_vec[i])             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_t_5 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt((__pyx_v_result_vec[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_result, __pyx_v_i, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":264
 *         result[i] = ZZpToInt(result_vec[i])
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef partial_fft(coeffs, omega, modulus, int n, int k):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":246
 *     return result
 * 
 * cpdef fft(coeffs, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i, d;
 *     cdef vec_ZZ_p coeffs_vec, result_vec;
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_11fft(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_11fft(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeffs = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_modulus = 0;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fft (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeffs,&__pyx_n_s_omega,&__pyx_n_s_modulus,&__pyx_n_s_n,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft", 1, 4, 4, 1); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft", 1, 4, 4, 2); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft", 1, 4, 4, 3); __PYX_ERR(0, 246, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fft") < 0)) __PYX_ERR(0, 246, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_coeffs = values[0];
    __pyx_v_omega = values[1];
    __pyx_v_modulus = values[2];
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fft", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_10fft(__pyx_self, __pyx_v_coeffs, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_10fft(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fft", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_fft(__pyx_v_coeffs, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":266
 *     return result
 * 
 * cpdef partial_fft(coeffs, omega, modulus, int n, int k):             # <<<<<<<<<<<<<<
 *     cdef int i, d;
 *     cdef vec_ZZ_p coeffs_vec, result_vec;
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_13partial_fft(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_partial_fft(PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n, int __pyx_v_k, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_d;
  vec_ZZ_p __pyx_v_coeffs_vec;
  vec_ZZ_p __pyx_v_result_vec;
  ZZ_p __pyx_v_zz_omega;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("partial_fft", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":270
 *     cdef vec_ZZ_p coeffs_vec, result_vec;
 * 
 *     ZZ_p_init(intToZZ(modulus))             # <<<<<<<<<<<<<<
 * 
 *     d = len(coeffs)
 */
  ZZ_p::init(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_modulus));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":272
 *     ZZ_p_init(intToZZ(modulus))
 * 
 *     d = len(coeffs)             # <<<<<<<<<<<<<<
 *     coeffs_vec.SetLength(d)
 *     for i in range(d):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_v_d = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":273
 * 
 *     d = len(coeffs)
 *     coeffs_vec.SetLength(d)             # <<<<<<<<<<<<<<
 *     for i in range(d):
 *         coeffs_vec[i] = intToZZp(coeffs[i])
 */
  __pyx_v_coeffs_vec.SetLength(__pyx_v_d);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":274
 *     d = len(coeffs)
 *     coeffs_vec.SetLength(d)
 *     for i in range(d):             # <<<<<<<<<<<<<<
 *         coeffs_vec[i] = intToZZp(coeffs[i])
 * 
 */
  __pyx_t_2 = __pyx_v_d;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":275
 *     coeffs_vec.SetLength(d)
 *     for i in range(d):
 *         coeffs_vec[i] = intToZZp(coeffs[i])             # <<<<<<<<<<<<<<
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    (__pyx_v_coeffs_vec[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":277
 *         coeffs_vec[i] = intToZZp(coeffs[i])
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)             # <<<<<<<<<<<<<<
 *     fft_partial_c(result_vec, coeffs_vec, zz_omega, n, k)
 * 
 */
  __pyx_v_zz_omega = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_omega);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":278
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 *     fft_partial_c(result_vec, coeffs_vec, zz_omega, n, k)             # <<<<<<<<<<<<<<
 * 
 *     result = [None] * k
 */
  fft(__pyx_v_result_vec, __pyx_v_coeffs_vec, __pyx_v_zz_omega, __pyx_v_n, __pyx_v_k);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":280
 *     fft_partial_c(result_vec, coeffs_vec, zz_omega, n, k)
 * 
 *     result = [None] * k             # <<<<<<<<<<<<<<
 *     for i in range(k):
 *         result[i] = ZZpToInt(result_vec[i])
 */
  __pyx_t_5 = PyList_New(1 * ((__pyx_v_k<0) ? 0:__pyx_v_k)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_k; __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_5, __pyx_temp, Py_None);
    }
  }
  __pyx_v_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":281
 * 
 *     result = [None] * k
 *     for i in range(k):             # <<<<<<<<<<<<<<
 *         result[i] = ZZpToInt(result_vec[i])
 * 
 */
  __pyx_t_2 = __pyx_v_k;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":282
 *     result = [None] * k
 *     for i in range(k):
 *         result[i] = ZZpToInt(result_vec[i])             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_t_5 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt((__pyx_v_result_vec[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_result, __pyx_v_i, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":284
 *         result[i] = ZZpToInt(result_vec[i])
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef fft_batch_evaluate(coeffs, omega, modulus, int n, int k):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":266
 *     return result
 * 
 * cpdef partial_fft(coeffs, omega, modulus, int n, int k):             # <<<<<<<<<<<<<<
 *     cdef int i, d;
 *     cdef vec_ZZ_p coeffs_vec, result_vec;
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.partial_fft", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_13partial_fft(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_13partial_fft(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeffs = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_modulus = 0;
  int __pyx_v_n;
  int __pyx_v_k;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("partial_fft (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeffs,&__pyx_n_s_omega,&__pyx_n_s_modulus,&__pyx_n_s_n,&__pyx_n_s_k,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partial_fft", 1, 5, 5, 1); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partial_fft", 1, 5, 5, 2); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partial_fft", 1, 5, 5, 3); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partial_fft", 1, 5, 5, 4); __PYX_ERR(0, 266, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "partial_fft") < 0)) __PYX_ERR(0, 266, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_coeffs = values[0];
    __pyx_v_omega = values[1];
    __pyx_v_modulus = values[2];
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("partial_fft", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.partial_fft", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_12partial_fft(__pyx_self, __pyx_v_coeffs, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n, __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_12partial_fft(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n, int __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("partial_fft", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_partial_fft(__pyx_v_coeffs, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n, __pyx_v_k, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.partial_fft", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":286
 *     return result
 * 
 * cpdef fft_batch_evaluate(coeffs, omega, modulus, int n, int k):             # <<<<<<<<<<<<<<
 *     cdef int i, d;
 *     cdef vector[vec_ZZ_p] coeffs_vec_list, result_vec_list
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_15fft_batch_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_fft_batch_evaluate(PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n, int __pyx_v_k, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_d;
  std::vector<vec_ZZ_p>  __pyx_v_coeffs_vec_list;
  std::vector<vec_ZZ_p>  __pyx_v_result_vec_list;
  ZZ __pyx_v_zz_modulus;
  Py_ssize_t __pyx_v_batch_size;
  int __pyx_v_j;
  ZZ_p __pyx_v_zz_omega;
  PyObject *__pyx_v_result = NULL;
  CYTHON_UNUSED Py_ssize_t __pyx_v__;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("fft_batch_evaluate", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":291
 *     cdef ZZ zz_modulus
 * 
 *     zz_modulus = intToZZ(modulus)             # <<<<<<<<<<<<<<
 *     ZZ_p_init(zz_modulus)
 * 
 */
  __pyx_v_zz_modulus = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":292
 * 
 *     zz_modulus = intToZZ(modulus)
 *     ZZ_p_init(zz_modulus)             # <<<<<<<<<<<<<<
 * 
 *     batch_size = len(coeffs)
 */
  ZZ_p::init(__pyx_v_zz_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":294
 *     ZZ_p_init(zz_modulus)
 * 
 *     batch_size = len(coeffs)             # <<<<<<<<<<<<<<
 *     d = len(coeffs[0])
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_v_batch_size = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":295
 * 
 *     batch_size = len(coeffs)
 *     d = len(coeffs[0])             # <<<<<<<<<<<<<<
 * 
 *     coeffs_vec_list.resize(batch_size)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_d = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":297
 *     d = len(coeffs[0])
 * 
 *     coeffs_vec_list.resize(batch_size)             # <<<<<<<<<<<<<<
 *     result_vec_list.resize(batch_size)
 * 
 */
  try {
    __pyx_v_coeffs_vec_list.resize(__pyx_v_batch_size);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 297, __pyx_L1_error)
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":298
 * 
 *     coeffs_vec_list.resize(batch_size)
 *     result_vec_list.resize(batch_size)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(batch_size):
 */
  try {
    __pyx_v_result_vec_list.resize(__pyx_v_batch_size);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 298, __pyx_L1_error)
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":300
 *     result_vec_list.resize(batch_size)
 * 
 *     for i in range(batch_size):             # <<<<<<<<<<<<<<
 *         coeffs_vec_list[i].SetLength(d)
 *         for j in range(d):
 */
  __pyx_t_1 = __pyx_v_batch_size;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":301
 * 
 *     for i in range(batch_size):
 *         coeffs_vec_list[i].SetLength(d)             # <<<<<<<<<<<<<<
 *         for j in range(d):
 *             coeffs_vec_list[i][j] = intToZZp(coeffs[i][j])
 */
    (__pyx_v_coeffs_vec_list[__pyx_v_i]).SetLength(__pyx_v_d);

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":302
 *     for i in range(batch_size):
 *         coeffs_vec_list[i].SetLength(d)
 *         for j in range(d):             # <<<<<<<<<<<<<<
 *             coeffs_vec_list[i][j] = intToZZp(coeffs[i][j])
 * 
 */
    __pyx_t_5 = __pyx_v_d;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":303
 *         coeffs_vec_list[i].SetLength(d)
 *         for j in range(d):
 *             coeffs_vec_list[i][j] = intToZZp(coeffs[i][j])             # <<<<<<<<<<<<<<
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      ((__pyx_v_coeffs_vec_list[__pyx_v_i])[__pyx_v_j]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":305
 *             coeffs_vec_list[i][j] = intToZZp(coeffs[i][j])
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)             # <<<<<<<<<<<<<<
 *     with nogil, parallel():
 *         ZZ_p_init(zz_modulus)
 */
  __pyx_v_zz_omega = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_omega);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":306
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         ZZ_p_init(zz_modulus)
 *         for i in prange(batch_size):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_1, __pyx_t_3, __pyx_t_9)
            #endif /* _OPENMP */
            {

                /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":307
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 *     with nogil, parallel():
 *         ZZ_p_init(zz_modulus)             # <<<<<<<<<<<<<<
 *         for i in prange(batch_size):
 *             fft_partial_c(result_vec_list[i], coeffs_vec_list[i], zz_omega, n, k)
 */
                ZZ_p::init(__pyx_v_zz_modulus);

                /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":308
 *     with nogil, parallel():
 *         ZZ_p_init(zz_modulus)
 *         for i in prange(batch_size):             # <<<<<<<<<<<<<<
 *             fft_partial_c(result_vec_list[i], coeffs_vec_list[i], zz_omega, n, k)
 * 
 */
                __pyx_t_1 = __pyx_v_batch_size;
                if ((1 == 0)) abort();
                {
                    __pyx_t_9 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_9 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                        #endif /* _OPENMP */
                        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_9; __pyx_t_3++){
                            {
                                __pyx_v_i = (int)(0 + 1 * __pyx_t_3);

                                /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":309
 *         ZZ_p_init(zz_modulus)
 *         for i in prange(batch_size):
 *             fft_partial_c(result_vec_list[i], coeffs_vec_list[i], zz_omega, n, k)             # <<<<<<<<<<<<<<
 * 
 *     result = [[None] * k for _ in range(batch_size)]
 */
                                fft((__pyx_v_result_vec_list[__pyx_v_i]), (__pyx_v_coeffs_vec_list[__pyx_v_i]), __pyx_v_zz_omega, __pyx_v_n, __pyx_v_k);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":306
 * 
 *     cdef ZZ_p zz_omega = intToZZp(omega)
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         ZZ_p_init(zz_modulus)
 *         for i in prange(batch_size):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":311
 *             fft_partial_c(result_vec_list[i], coeffs_vec_list[i], zz_omega, n, k)
 * 
 *     result = [[None] * k for _ in range(batch_size)]             # <<<<<<<<<<<<<<
 *     for i in range(batch_size):
 *         for j in range(k):
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __pyx_v_batch_size;
  __pyx_t_3 = __pyx_t_9;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v__ = __pyx_t_1;
    __pyx_t_2 = PyList_New(1 * ((__pyx_v_k<0) ? 0:__pyx_v_k)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_k; __pyx_temp++) {
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      }
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_result = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":312
 * 
 *     result = [[None] * k for _ in range(batch_size)]
 *     for i in range(batch_size):             # <<<<<<<<<<<<<<
 *         for j in range(k):
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])
 */
  __pyx_t_9 = __pyx_v_batch_size;
  __pyx_t_3 = __pyx_t_9;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":313
 *     result = [[None] * k for _ in range(batch_size)]
 *     for i in range(batch_size):
 *         for j in range(k):             # <<<<<<<<<<<<<<
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])
 * 
 */
    __pyx_t_5 = __pyx_v_k;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":314
 *     for i in range(batch_size):
 *         for j in range(k):
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
      __pyx_t_8 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt(((__pyx_v_result_vec_list[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_result, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_v_j, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":316
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def fft_interpolate(zs, ys, omega, modulus, int n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":286
 *     return result
 * 
 * cpdef fft_batch_evaluate(coeffs, omega, modulus, int n, int k):             # <<<<<<<<<<<<<<
 *     cdef int i, d;
 *     cdef vector[vec_ZZ_p] coeffs_vec_list, result_vec_list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft_batch_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_15fft_batch_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_15fft_batch_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeffs = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_modulus = 0;
  int __pyx_v_n;
  int __pyx_v_k;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fft_batch_evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeffs,&__pyx_n_s_omega,&__pyx_n_s_modulus,&__pyx_n_s_n,&__pyx_n_s_k,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_evaluate", 1, 5, 5, 1); __PYX_ERR(0, 286, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_evaluate", 1, 5, 5, 2); __PYX_ERR(0, 286, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_evaluate", 1, 5, 5, 3); __PYX_ERR(0, 286, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_evaluate", 1, 5, 5, 4); __PYX_ERR(0, 286, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fft_batch_evaluate") < 0)) __PYX_ERR(0, 286, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_coeffs = values[0];
    __pyx_v_omega = values[1];
    __pyx_v_modulus = values[2];
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fft_batch_evaluate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft_batch_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_14fft_batch_evaluate(__pyx_self, __pyx_v_coeffs, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n, __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_14fft_batch_evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n, int __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fft_batch_evaluate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_fft_batch_evaluate(__pyx_v_coeffs, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n, __pyx_v_k, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft_batch_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":318
 *     return result
 * 
 * def fft_interpolate(zs, ys, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int k = len(zs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_17fft_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_17fft_interpolate = {"fft_interpolate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_17fft_interpolate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_17fft_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_zs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_modulus = 0;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fft_interpolate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zs,&__pyx_n_s_ys,&__pyx_n_s_omega,&__pyx_n_s_modulus,&__pyx_n_s_n,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_interpolate", 1, 5, 5, 1); __PYX_ERR(0, 318, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_interpolate", 1, 5, 5, 2); __PYX_ERR(0, 318, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_interpolate", 1, 5, 5, 3); __PYX_ERR(0, 318, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_interpolate", 1, 5, 5, 4); __PYX_ERR(0, 318, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fft_interpolate") < 0)) __PYX_ERR(0, 318, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_zs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_omega = values[2];
    __pyx_v_modulus = values[3];
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fft_interpolate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 318, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_16fft_interpolate(__pyx_self, __pyx_v_zs, __pyx_v_ys, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_16fft_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_zs, PyObject *__pyx_v_ys, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n) {
  int __pyx_v_i;
  int __pyx_v_k;
  std::vector<int>  __pyx_v_z_vec;
  vec_ZZ_p __pyx_v_y_vec;
  vec_ZZ_p __pyx_v_Ad_evals_vec;
  vec_ZZ_p __pyx_v_P_coeffs;
  ZZ_pX __pyx_v_A;
  ZZ_p __pyx_v_zz_omega;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("fft_interpolate", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":320
 * def fft_interpolate(zs, ys, omega, modulus, int n):
 *     cdef int i
 *     cdef int k = len(zs)             # <<<<<<<<<<<<<<
 *     cdef vector[int] z_vec;
 *     cdef vec_ZZ_p y_vec, Ad_evals_vec, P_coeffs
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_zs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 320, __pyx_L1_error)
  __pyx_v_k = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":326
 *     cdef ZZ_p zz_omega
 * 
 *     ZZ_p_init(intToZZ(modulus))             # <<<<<<<<<<<<<<
 *     zz_omega = intToZZp(omega)
 *     z_vec.resize(k)
 */
  ZZ_p::init(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_modulus));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":327
 * 
 *     ZZ_p_init(intToZZ(modulus))
 *     zz_omega = intToZZp(omega)             # <<<<<<<<<<<<<<
 *     z_vec.resize(k)
 *     y_vec.SetLength(k)
 */
  __pyx_v_zz_omega = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_omega);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":328
 *     ZZ_p_init(intToZZ(modulus))
 *     zz_omega = intToZZp(omega)
 *     z_vec.resize(k)             # <<<<<<<<<<<<<<
 *     y_vec.SetLength(k)
 *     for i in range(k):
 */
  try {
    __pyx_v_z_vec.resize(__pyx_v_k);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 328, __pyx_L1_error)
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":329
 *     zz_omega = intToZZp(omega)
 *     z_vec.resize(k)
 *     y_vec.SetLength(k)             # <<<<<<<<<<<<<<
 *     for i in range(k):
 *         z_vec[i] = PyInt_AS_LONG(zs[i])
 */
  __pyx_v_y_vec.SetLength(__pyx_v_k);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":330
 *     z_vec.resize(k)
 *     y_vec.SetLength(k)
 *     for i in range(k):             # <<<<<<<<<<<<<<
 *         z_vec[i] = PyInt_AS_LONG(zs[i])
 *         y_vec[i] = intToZZp(ys[i])
 */
  __pyx_t_2 = __pyx_v_k;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":331
 *     y_vec.SetLength(k)
 *     for i in range(k):
 *         z_vec[i] = PyInt_AS_LONG(zs[i])             # <<<<<<<<<<<<<<
 *         y_vec[i] = intToZZp(ys[i])
 * 
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_zs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    (__pyx_v_z_vec[__pyx_v_i]) = PyInt_AS_LONG(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":332
 *     for i in range(k):
 *         z_vec[i] = PyInt_AS_LONG(zs[i])
 *         y_vec[i] = intToZZp(ys[i])             # <<<<<<<<<<<<<<
 * 
 *     fnt_decode_step1_c(A, Ad_evals_vec, z_vec, zz_omega, n)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_ys, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    (__pyx_v_y_vec[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":334
 *         y_vec[i] = intToZZp(ys[i])
 * 
 *     fnt_decode_step1_c(A, Ad_evals_vec, z_vec, zz_omega, n)             # <<<<<<<<<<<<<<
 *     fnt_decode_step2_c(P_coeffs, A, Ad_evals_vec, z_vec, y_vec, zz_omega, n)
 * 
 */
  fnt_decode_step1(__pyx_v_A, __pyx_v_Ad_evals_vec, __pyx_v_z_vec, __pyx_v_zz_omega, __pyx_v_n);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":335
 * 
 *     fnt_decode_step1_c(A, Ad_evals_vec, z_vec, zz_omega, n)
 *     fnt_decode_step2_c(P_coeffs, A, Ad_evals_vec, z_vec, y_vec, zz_omega, n)             # <<<<<<<<<<<<<<
 * 
 *     result = [None] * k
 */
  fnt_decode_step2(__pyx_v_P_coeffs, __pyx_v_A, __pyx_v_Ad_evals_vec, __pyx_v_z_vec, __pyx_v_y_vec, __pyx_v_zz_omega, __pyx_v_n);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":337
 *     fnt_decode_step2_c(P_coeffs, A, Ad_evals_vec, z_vec, y_vec, zz_omega, n)
 * 
 *     result = [None] * k             # <<<<<<<<<<<<<<
 *     for i in range(k):
 *         result[i] = int(ccrepr(P_coeffs[i]))
 */
  __pyx_t_5 = PyList_New(1 * ((__pyx_v_k<0) ? 0:__pyx_v_k)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_k; __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_5, __pyx_temp, Py_None);
    }
  }
  __pyx_v_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":338
 * 
 *     result = [None] * k
 *     for i in range(k):             # <<<<<<<<<<<<<<
 *         result[i] = int(ccrepr(P_coeffs[i]))
 *     return result
 */
  __pyx_t_2 = __pyx_v_k;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":339
 *     result = [None] * k
 *     for i in range(k):
 *         result[i] = int(ccrepr(P_coeffs[i]))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_5 = ccrepr<ZZ_p &>((__pyx_v_P_coeffs[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_result, __pyx_v_i, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":340
 *     for i in range(k):
 *         result[i] = int(ccrepr(P_coeffs[i]))
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def fft_batch_interpolate(zs, ys_list, omega, modulus, int n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":318
 *     return result
 * 
 * def fft_interpolate(zs, ys, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int k = len(zs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":342
 *     return result
 * 
 * def fft_batch_interpolate(zs, ys_list, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     cdef int k = len(zs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_19fft_batch_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_19fft_batch_interpolate = {"fft_batch_interpolate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_19fft_batch_interpolate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_19fft_batch_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_zs = 0;
  PyObject *__pyx_v_ys_list = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_modulus = 0;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fft_batch_interpolate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zs,&__pyx_n_s_ys_list,&__pyx_n_s_omega,&__pyx_n_s_modulus,&__pyx_n_s_n,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_interpolate", 1, 5, 5, 1); __PYX_ERR(0, 342, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_interpolate", 1, 5, 5, 2); __PYX_ERR(0, 342, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_interpolate", 1, 5, 5, 3); __PYX_ERR(0, 342, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fft_batch_interpolate", 1, 5, 5, 4); __PYX_ERR(0, 342, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fft_batch_interpolate") < 0)) __PYX_ERR(0, 342, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_zs = values[0];
    __pyx_v_ys_list = values[1];
    __pyx_v_omega = values[2];
    __pyx_v_modulus = values[3];
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 342, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fft_batch_interpolate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 342, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft_batch_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_18fft_batch_interpolate(__pyx_self, __pyx_v_zs, __pyx_v_ys_list, __pyx_v_omega, __pyx_v_modulus, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_18fft_batch_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_zs, PyObject *__pyx_v_ys_list, PyObject *__pyx_v_omega, PyObject *__pyx_v_modulus, int __pyx_v_n) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  std::vector<int>  __pyx_v_z_vec;
  vec_ZZ_p __pyx_v_Ad_evals_vec;
  ZZ_pX __pyx_v_A;
  ZZ_p __pyx_v_zz_omega;
  int __pyx_v_n_chunks;
  ZZ __pyx_v_zz_modulus;
  std::vector<vec_ZZ_p>  __pyx_v_y_vec_list;
  std::vector<vec_ZZ_p>  __pyx_v_result_vec_list;
  PyObject *__pyx_v_result = NULL;
  CYTHON_UNUSED int __pyx_v__;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("fft_batch_interpolate", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":344
 * def fft_batch_interpolate(zs, ys_list, omega, modulus, int n):
 *     cdef int i, j
 *     cdef int k = len(zs)             # <<<<<<<<<<<<<<
 *     cdef vector[int] z_vec;
 *     cdef vec_ZZ_p y_vec, Ad_evals_vec, P_coeffs
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_zs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_v_k = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":349
 *     cdef ZZ_pX_c A
 *     cdef ZZ_p zz_omega
 *     cdef int n_chunks = len(ys_list)             # <<<<<<<<<<<<<<
 *     cdef ZZ zz_modulus
 *     zz_modulus = intToZZ(modulus)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ys_list); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_n_chunks = __pyx_t_1;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":351
 *     cdef int n_chunks = len(ys_list)
 *     cdef ZZ zz_modulus
 *     zz_modulus = intToZZ(modulus)             # <<<<<<<<<<<<<<
 *     ZZ_p_init(intToZZ(modulus))
 *     zz_omega = intToZZp(omega)
 */
  __pyx_v_zz_modulus = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_modulus);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":352
 *     cdef ZZ zz_modulus
 *     zz_modulus = intToZZ(modulus)
 *     ZZ_p_init(intToZZ(modulus))             # <<<<<<<<<<<<<<
 *     zz_omega = intToZZp(omega)
 *     z_vec.resize(k)
 */
  ZZ_p::init(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_modulus));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":353
 *     zz_modulus = intToZZ(modulus)
 *     ZZ_p_init(intToZZ(modulus))
 *     zz_omega = intToZZp(omega)             # <<<<<<<<<<<<<<
 *     z_vec.resize(k)
 *     for i in range(k):
 */
  __pyx_v_zz_omega = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_omega);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":354
 *     ZZ_p_init(intToZZ(modulus))
 *     zz_omega = intToZZp(omega)
 *     z_vec.resize(k)             # <<<<<<<<<<<<<<
 *     for i in range(k):
 *         z_vec[i] = PyInt_AS_LONG(zs[i])
 */
  try {
    __pyx_v_z_vec.resize(__pyx_v_k);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 354, __pyx_L1_error)
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":355
 *     zz_omega = intToZZp(omega)
 *     z_vec.resize(k)
 *     for i in range(k):             # <<<<<<<<<<<<<<
 *         z_vec[i] = PyInt_AS_LONG(zs[i])
 * 
 */
  __pyx_t_2 = __pyx_v_k;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":356
 *     z_vec.resize(k)
 *     for i in range(k):
 *         z_vec[i] = PyInt_AS_LONG(zs[i])             # <<<<<<<<<<<<<<
 * 
 *     fnt_decode_step1_c(A, Ad_evals_vec, z_vec, zz_omega, n)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_zs, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    (__pyx_v_z_vec[__pyx_v_i]) = PyInt_AS_LONG(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":358
 *         z_vec[i] = PyInt_AS_LONG(zs[i])
 * 
 *     fnt_decode_step1_c(A, Ad_evals_vec, z_vec, zz_omega, n)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[vec_ZZ_p] y_vec_list, result_vec_list;
 */
  fnt_decode_step1(__pyx_v_A, __pyx_v_Ad_evals_vec, __pyx_v_z_vec, __pyx_v_zz_omega, __pyx_v_n);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":361
 * 
 *     cdef vector[vec_ZZ_p] y_vec_list, result_vec_list;
 *     y_vec_list.resize(n_chunks)             # <<<<<<<<<<<<<<
 *     result_vec_list.resize(n_chunks)
 * 
 */
  try {
    __pyx_v_y_vec_list.resize(__pyx_v_n_chunks);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 361, __pyx_L1_error)
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":362
 *     cdef vector[vec_ZZ_p] y_vec_list, result_vec_list;
 *     y_vec_list.resize(n_chunks)
 *     result_vec_list.resize(n_chunks)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_chunks):
 */
  try {
    __pyx_v_result_vec_list.resize(__pyx_v_n_chunks);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 362, __pyx_L1_error)
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":364
 *     result_vec_list.resize(n_chunks)
 * 
 *     for i in range(n_chunks):             # <<<<<<<<<<<<<<
 *         y_vec_list[i].SetLength(k)
 *         for j in range(k):
 */
  __pyx_t_2 = __pyx_v_n_chunks;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":365
 * 
 *     for i in range(n_chunks):
 *         y_vec_list[i].SetLength(k)             # <<<<<<<<<<<<<<
 *         for j in range(k):
 *             y_vec_list[i][j] = intToZZp(ys_list[i][j])
 */
    (__pyx_v_y_vec_list[__pyx_v_i]).SetLength(__pyx_v_k);

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":366
 *     for i in range(n_chunks):
 *         y_vec_list[i].SetLength(k)
 *         for j in range(k):             # <<<<<<<<<<<<<<
 *             y_vec_list[i][j] = intToZZp(ys_list[i][j])
 * 
 */
    __pyx_t_6 = __pyx_v_k;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":367
 *         y_vec_list[i].SetLength(k)
 *         for j in range(k):
 *             y_vec_list[i][j] = intToZZp(ys_list[i][j])             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_ys_list, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      ((__pyx_v_y_vec_list[__pyx_v_i])[__pyx_v_j]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":369
 *             y_vec_list[i][j] = intToZZp(ys_list[i][j])
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 * 
 *         ZZ_p_init(zz_modulus)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_2, __pyx_t_3, __pyx_t_4)
            #endif /* _OPENMP */
            {

                /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":371
 *     with nogil, parallel():
 * 
 *         ZZ_p_init(zz_modulus)             # <<<<<<<<<<<<<<
 *         for i in prange(n_chunks):
 *             fnt_decode_step2_c(result_vec_list[i], A, Ad_evals_vec, z_vec, y_vec_list[i],
 */
                ZZ_p::init(__pyx_v_zz_modulus);

                /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":372
 * 
 *         ZZ_p_init(zz_modulus)
 *         for i in prange(n_chunks):             # <<<<<<<<<<<<<<
 *             fnt_decode_step2_c(result_vec_list[i], A, Ad_evals_vec, z_vec, y_vec_list[i],
 *                                zz_omega, n)
 */
                __pyx_t_2 = __pyx_v_n_chunks;
                if ((1 == 0)) abort();
                {
                    __pyx_t_4 = (__pyx_t_2 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_4 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                        #endif /* _OPENMP */
                        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_4; __pyx_t_3++){
                            {
                                __pyx_v_i = (int)(0 + 1 * __pyx_t_3);

                                /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":373
 *         ZZ_p_init(zz_modulus)
 *         for i in prange(n_chunks):
 *             fnt_decode_step2_c(result_vec_list[i], A, Ad_evals_vec, z_vec, y_vec_list[i],             # <<<<<<<<<<<<<<
 *                                zz_omega, n)
 * 
 */
                                fnt_decode_step2((__pyx_v_result_vec_list[__pyx_v_i]), __pyx_v_A, __pyx_v_Ad_evals_vec, __pyx_v_z_vec, (__pyx_v_y_vec_list[__pyx_v_i]), __pyx_v_zz_omega, __pyx_v_n);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":369
 *             y_vec_list[i][j] = intToZZp(ys_list[i][j])
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 * 
 *         ZZ_p_init(zz_modulus)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":376
 *                                zz_omega, n)
 * 
 *     result = [[None] * k for _ in range(n_chunks)]             # <<<<<<<<<<<<<<
 *     for i in range(n_chunks):
 *         for j in range(k):
 */
  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __pyx_v_n_chunks;
  __pyx_t_3 = __pyx_t_4;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2+=1) {
    __pyx_v__ = __pyx_t_2;
    __pyx_t_5 = PyList_New(1 * ((__pyx_v_k<0) ? 0:__pyx_v_k)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_k; __pyx_temp++) {
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyList_SET_ITEM(__pyx_t_5, __pyx_temp, Py_None);
      }
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_result = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":377
 * 
 *     result = [[None] * k for _ in range(n_chunks)]
 *     for i in range(n_chunks):             # <<<<<<<<<<<<<<
 *         for j in range(k):
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])
 */
  __pyx_t_4 = __pyx_v_n_chunks;
  __pyx_t_3 = __pyx_t_4;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":378
 *     result = [[None] * k for _ in range(n_chunks)]
 *     for i in range(n_chunks):
 *         for j in range(k):             # <<<<<<<<<<<<<<
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])
 * 
 */
    __pyx_t_6 = __pyx_v_k;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":379
 *     for i in range(n_chunks):
 *         for j in range(k):
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
      __pyx_t_9 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_ZZpToInt(((__pyx_v_result_vec_list[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_result, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_5, __pyx_v_j, __pyx_t_9, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":381
 *             result[i][j] = ZZpToInt(result_vec_list[i][j])
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef SetNTLNumThreads(int x):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":342
 *     return result
 * 
 * def fft_batch_interpolate(zs, ys_list, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     cdef int k = len(zs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.fft_batch_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":383
 *     return result
 * 
 * cpdef SetNTLNumThreads(int x):             # <<<<<<<<<<<<<<
 *     SetNTLNumThreads_c(x)
 * 
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_21SetNTLNumThreads(PyObject *__pyx_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_SetNTLNumThreads(int __pyx_v_x, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetNTLNumThreads", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":384
 * 
 * cpdef SetNTLNumThreads(int x):
 *     SetNTLNumThreads_c(x)             # <<<<<<<<<<<<<<
 * 
 * cpdef int AvailableNTLThreads():
 */
  SetNumThreads(__pyx_v_x);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":383
 *     return result
 * 
 * cpdef SetNTLNumThreads(int x):             # <<<<<<<<<<<<<<
 *     SetNTLNumThreads_c(x)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_21SetNTLNumThreads(PyObject *__pyx_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_21SetNTLNumThreads(PyObject *__pyx_self, PyObject *__pyx_arg_x) {
  int __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetNTLNumThreads (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __Pyx_PyInt_As_int(__pyx_arg_x); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.SetNTLNumThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_20SetNTLNumThreads(__pyx_self, ((int)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_20SetNTLNumThreads(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("SetNTLNumThreads", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_SetNTLNumThreads(__pyx_v_x, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.SetNTLNumThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":386
 *     SetNTLNumThreads_c(x)
 * 
 * cpdef int AvailableNTLThreads():             # <<<<<<<<<<<<<<
 *     return AvailableThreads()
 * 
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_23AvailableNTLThreads(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_AvailableNTLThreads(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AvailableNTLThreads", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":387
 * 
 * cpdef int AvailableNTLThreads():
 *     return AvailableThreads()             # <<<<<<<<<<<<<<
 * 
 * cpdef gao_interpolate(x, y, int k, modulus, z=None, omega=None, order=None,
 */
  __pyx_r = AvailableThreads();
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":386
 *     SetNTLNumThreads_c(x)
 * 
 * cpdef int AvailableNTLThreads():             # <<<<<<<<<<<<<<
 *     return AvailableThreads()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_23AvailableNTLThreads(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_23AvailableNTLThreads(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AvailableNTLThreads (wrapper)", 0);
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_22AvailableNTLThreads(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_22AvailableNTLThreads(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("AvailableNTLThreads", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_AvailableNTLThreads(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.AvailableNTLThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":389
 *     return AvailableThreads()
 * 
 * cpdef gao_interpolate(x, y, int k, modulus, z=None, omega=None, order=None,             # <<<<<<<<<<<<<<
 *                       use_omega_powers=False):
 *     cdef vec_ZZ_p x_vec, y_vec, res_vec, err_vec
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_25gao_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_k, PyObject *__pyx_v_modulus, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate *__pyx_optional_args) {
  PyObject *__pyx_v_z = ((PyObject *)Py_None);
  PyObject *__pyx_v_omega = ((PyObject *)Py_None);
  PyObject *__pyx_v_order = ((PyObject *)Py_None);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":390
 * 
 * cpdef gao_interpolate(x, y, int k, modulus, z=None, omega=None, order=None,
 *                       use_omega_powers=False):             # <<<<<<<<<<<<<<
 *     cdef vec_ZZ_p x_vec, y_vec, res_vec, err_vec
 *     cdef ZZ_p zz_omega
 */
  PyObject *__pyx_v_use_omega_powers = ((PyObject *)Py_False);
  vec_ZZ_p __pyx_v_x_vec;
  vec_ZZ_p __pyx_v_y_vec;
  vec_ZZ_p __pyx_v_res_vec;
  vec_ZZ_p __pyx_v_err_vec;
  ZZ_p __pyx_v_zz_omega;
  std::vector<int>  __pyx_v_z_vec;
  int __pyx_v_i;
  int __pyx_v_n;
  CYTHON_UNUSED int __pyx_v_int_order;
  int __pyx_v_success;
  PyObject *__pyx_v_is_null = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_error_poly = NULL;
  PyObject *__pyx_v_yi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  __Pyx_RefNannySetupContext("gao_interpolate", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_z = __pyx_optional_args->z;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_omega = __pyx_optional_args->omega;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_order = __pyx_optional_args->order;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_use_omega_powers = __pyx_optional_args->use_omega_powers;
          }
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_INCREF(__pyx_v_y);
  __Pyx_INCREF(__pyx_v_z);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":396
 *     cdef int i, n, int_order
 *     cdef int success
 *     assert len(x) == len(y)             # <<<<<<<<<<<<<<
 *     ZZ_p_init(intToZZ(modulus))
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 396, __pyx_L1_error)
    __pyx_t_2 = PyObject_Length(__pyx_v_y); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 396, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == __pyx_t_2) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 396, __pyx_L1_error)
    }
  }
  #endif

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":397
 *     cdef int success
 *     assert len(x) == len(y)
 *     ZZ_p_init(intToZZ(modulus))             # <<<<<<<<<<<<<<
 * 
 *     is_null = [yi is None for yi in y]
 */
  ZZ_p::init(__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_modulus));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":399
 *     ZZ_p_init(intToZZ(modulus))
 * 
 *     is_null = [yi is None for yi in y]             # <<<<<<<<<<<<<<
 *     x = [x[i] for i in range(len(x)) if not is_null[i]]
 *     y = [y[i] for i in range(len(y)) if not is_null[i]]
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_v_y)) || PyTuple_CheckExact(__pyx_v_y)) {
    __pyx_t_4 = __pyx_v_y; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_4);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 399, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_yi, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_7 = (__pyx_v_yi == Py_None);
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_is_null = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":400
 * 
 *     is_null = [yi is None for yi in y]
 *     x = [x[i] for i in range(len(x)) if not is_null[i]]             # <<<<<<<<<<<<<<
 *     y = [y[i] for i in range(len(y)) if not is_null[i]]
 *     if z is not None:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_is_null, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = ((!__pyx_t_7) != 0);
    if (__pyx_t_9) {
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF_SET(__pyx_v_x, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":401
 *     is_null = [yi is None for yi in y]
 *     x = [x[i] for i in range(len(x)) if not is_null[i]]
 *     y = [y[i] for i in range(len(y)) if not is_null[i]]             # <<<<<<<<<<<<<<
 *     if z is not None:
 *         z = [z[i] for i in range(len(z)) if not is_null[i]]
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_Length(__pyx_v_y); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_is_null, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = ((!__pyx_t_9) != 0);
    if (__pyx_t_7) {
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_y, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF_SET(__pyx_v_y, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":402
 *     x = [x[i] for i in range(len(x)) if not is_null[i]]
 *     y = [y[i] for i in range(len(y)) if not is_null[i]]
 *     if z is not None:             # <<<<<<<<<<<<<<
 *         z = [z[i] for i in range(len(z)) if not is_null[i]]
 * 
 */
  __pyx_t_7 = (__pyx_v_z != Py_None);
  __pyx_t_9 = (__pyx_t_7 != 0);
  if (__pyx_t_9) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":403
 *     y = [y[i] for i in range(len(y)) if not is_null[i]]
 *     if z is not None:
 *         z = [z[i] for i in range(len(z)) if not is_null[i]]             # <<<<<<<<<<<<<<
 * 
 *     n = len(x)
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_Length(__pyx_v_z); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 403, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_2;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_is_null, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = ((!__pyx_t_9) != 0);
      if (__pyx_t_7) {
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_z, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF_SET(__pyx_v_z, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":402
 *     x = [x[i] for i in range(len(x)) if not is_null[i]]
 *     y = [y[i] for i in range(len(y)) if not is_null[i]]
 *     if z is not None:             # <<<<<<<<<<<<<<
 *         z = [z[i] for i in range(len(z)) if not is_null[i]]
 * 
 */
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":405
 *         z = [z[i] for i in range(len(z)) if not is_null[i]]
 * 
 *     n = len(x)             # <<<<<<<<<<<<<<
 *     x_vec.SetLength(n)
 *     y_vec.SetLength(n)
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_v_n = __pyx_t_2;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":406
 * 
 *     n = len(x)
 *     x_vec.SetLength(n)             # <<<<<<<<<<<<<<
 *     y_vec.SetLength(n)
 * 
 */
  __pyx_v_x_vec.SetLength(__pyx_v_n);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":407
 *     n = len(x)
 *     x_vec.SetLength(n)
 *     y_vec.SetLength(n)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n):
 */
  __pyx_v_y_vec.SetLength(__pyx_v_n);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":409
 *     y_vec.SetLength(n)
 * 
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         x_vec[i] = intToZZp(x[i])
 *         y_vec[i] = intToZZp(y[i])
 */
  __pyx_t_8 = __pyx_v_n;
  __pyx_t_10 = __pyx_t_8;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":410
 * 
 *     for i in range(n):
 *         x_vec[i] = intToZZp(x[i])             # <<<<<<<<<<<<<<
 *         y_vec[i] = intToZZp(y[i])
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    (__pyx_v_x_vec[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":411
 *     for i in range(n):
 *         x_vec[i] = intToZZp(x[i])
 *         y_vec[i] = intToZZp(y[i])             # <<<<<<<<<<<<<<
 * 
 *     if use_omega_powers is True:
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_y, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    (__pyx_v_y_vec[__pyx_v_i]) = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":413
 *         y_vec[i] = intToZZp(y[i])
 * 
 *     if use_omega_powers is True:             # <<<<<<<<<<<<<<
 *         assert z is not None
 *         assert len(z) is n
 */
  __pyx_t_7 = (__pyx_v_use_omega_powers == Py_True);
  __pyx_t_9 = (__pyx_t_7 != 0);
  if (__pyx_t_9) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":414
 * 
 *     if use_omega_powers is True:
 *         assert z is not None             # <<<<<<<<<<<<<<
 *         assert len(z) is n
 *         assert omega is not None
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_9 = (__pyx_v_z != Py_None);
      if (unlikely(!(__pyx_t_9 != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 414, __pyx_L1_error)
      }
    }
    #endif

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":415
 *     if use_omega_powers is True:
 *         assert z is not None
 *         assert len(z) is n             # <<<<<<<<<<<<<<
 *         assert omega is not None
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = PyObject_Length(__pyx_v_z); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 415, __pyx_L1_error)
      if (unlikely(!((__pyx_t_2 == __pyx_v_n) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 415, __pyx_L1_error)
      }
    }
    #endif

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":416
 *         assert z is not None
 *         assert len(z) is n
 *         assert omega is not None             # <<<<<<<<<<<<<<
 * 
 *         zz_omega = intToZZp(omega)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_9 = (__pyx_v_omega != Py_None);
      if (unlikely(!(__pyx_t_9 != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 416, __pyx_L1_error)
      }
    }
    #endif

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":418
 *         assert omega is not None
 * 
 *         zz_omega = intToZZp(omega)             # <<<<<<<<<<<<<<
 *         int_order = int(order)
 *         z_vec.resize(n)
 */
    __pyx_v_zz_omega = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZp(__pyx_v_omega);

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":419
 * 
 *         zz_omega = intToZZp(omega)
 *         int_order = int(order)             # <<<<<<<<<<<<<<
 *         z_vec.resize(n)
 *         for i in range(n):
 */
    __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_int_order = __pyx_t_8;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":420
 *         zz_omega = intToZZp(omega)
 *         int_order = int(order)
 *         z_vec.resize(n)             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             z_vec[i] = int(z[i])
 */
    try {
      __pyx_v_z_vec.resize(__pyx_v_n);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 420, __pyx_L1_error)
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":421
 *         int_order = int(order)
 *         z_vec.resize(n)
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             z_vec[i] = int(z[i])
 * 
 */
    __pyx_t_8 = __pyx_v_n;
    __pyx_t_10 = __pyx_t_8;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":422
 *         z_vec.resize(n)
 *         for i in range(n):
 *             z_vec[i] = int(z[i])             # <<<<<<<<<<<<<<
 * 
 *         success = gao_interpolate_fft_c(res_vec, err_vec, x_vec, z_vec, y_vec,
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_z, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_z_vec[__pyx_v_i]) = __pyx_t_12;
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":425
 * 
 *         success = gao_interpolate_fft_c(res_vec, err_vec, x_vec, z_vec, y_vec,
 *                                         zz_omega, k, n, order)             # <<<<<<<<<<<<<<
 *     else:
 *         success = gao_interpolate_c(res_vec, err_vec, x_vec, y_vec, k, n)
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_order); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":424
 *             z_vec[i] = int(z[i])
 * 
 *         success = gao_interpolate_fft_c(res_vec, err_vec, x_vec, z_vec, y_vec,             # <<<<<<<<<<<<<<
 *                                         zz_omega, k, n, order)
 *     else:
 */
    __pyx_v_success = gao_interpolate_fft(__pyx_v_res_vec, __pyx_v_err_vec, __pyx_v_x_vec, __pyx_v_z_vec, __pyx_v_y_vec, __pyx_v_zz_omega, __pyx_v_k, __pyx_v_n, __pyx_t_8);

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":413
 *         y_vec[i] = intToZZp(y[i])
 * 
 *     if use_omega_powers is True:             # <<<<<<<<<<<<<<
 *         assert z is not None
 *         assert len(z) is n
 */
    goto __pyx_L17;
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":427
 *                                         zz_omega, k, n, order)
 *     else:
 *         success = gao_interpolate_c(res_vec, err_vec, x_vec, y_vec, k, n)             # <<<<<<<<<<<<<<
 * 
 *     if success:
 */
  /*else*/ {
    __pyx_v_success = gao_interpolate(__pyx_v_res_vec, __pyx_v_err_vec, __pyx_v_x_vec, __pyx_v_y_vec, __pyx_v_k, __pyx_v_n);
  }
  __pyx_L17:;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":429
 *         success = gao_interpolate_c(res_vec, err_vec, x_vec, y_vec, k, n)
 * 
 *     if success:             # <<<<<<<<<<<<<<
 *         result = [None] * res_vec.length()
 *         error_poly = [None] * err_vec.length()
 */
  __pyx_t_9 = (__pyx_v_success != 0);
  if (__pyx_t_9) {

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":430
 * 
 *     if success:
 *         result = [None] * res_vec.length()             # <<<<<<<<<<<<<<
 *         error_poly = [None] * err_vec.length()
 * 
 */
    __pyx_t_4 = PyList_New(1 * (__pyx_v_res_vec.length())); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_res_vec.length(); __pyx_temp++) {
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyList_SET_ITEM(__pyx_t_4, __pyx_temp, Py_None);
      }
    }
    __pyx_v_result = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":431
 *     if success:
 *         result = [None] * res_vec.length()
 *         error_poly = [None] * err_vec.length()             # <<<<<<<<<<<<<<
 * 
 *         for i in range(res_vec.length()):
 */
    __pyx_t_4 = PyList_New(1 * (__pyx_v_err_vec.length())); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_err_vec.length(); __pyx_temp++) {
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyList_SET_ITEM(__pyx_t_4, __pyx_temp, Py_None);
      }
    }
    __pyx_v_error_poly = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":433
 *         error_poly = [None] * err_vec.length()
 * 
 *         for i in range(res_vec.length()):             # <<<<<<<<<<<<<<
 *             result[i] = int(ccrepr(res_vec[i]))
 *         for i in range(err_vec.length()):
 */
    __pyx_t_13 = __pyx_v_res_vec.length();
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_14; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":434
 * 
 *         for i in range(res_vec.length()):
 *             result[i] = int(ccrepr(res_vec[i]))             # <<<<<<<<<<<<<<
 *         for i in range(err_vec.length()):
 *             error_poly[i] = int(ccrepr(err_vec[i]))
 */
      __pyx_t_4 = ccrepr<ZZ_p &>((__pyx_v_res_vec[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_result, __pyx_v_i, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":435
 *         for i in range(res_vec.length()):
 *             result[i] = int(ccrepr(res_vec[i]))
 *         for i in range(err_vec.length()):             # <<<<<<<<<<<<<<
 *             error_poly[i] = int(ccrepr(err_vec[i]))
 *         return result, error_poly
 */
    __pyx_t_13 = __pyx_v_err_vec.length();
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_14; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":436
 *             result[i] = int(ccrepr(res_vec[i]))
 *         for i in range(err_vec.length()):
 *             error_poly[i] = int(ccrepr(err_vec[i]))             # <<<<<<<<<<<<<<
 *         return result, error_poly
 * 
 */
      __pyx_t_3 = ccrepr<ZZ_p &>((__pyx_v_err_vec[__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_error_poly, __pyx_v_i, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":437
 *         for i in range(err_vec.length()):
 *             error_poly[i] = int(ccrepr(err_vec[i]))
 *         return result, error_poly             # <<<<<<<<<<<<<<
 * 
 *     return None, None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_result);
    __Pyx_INCREF(__pyx_v_error_poly);
    __Pyx_GIVEREF(__pyx_v_error_poly);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_error_poly);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":429
 *         success = gao_interpolate_c(res_vec, err_vec, x_vec, y_vec, k, n)
 * 
 *     if success:             # <<<<<<<<<<<<<<
 *         result = [None] * res_vec.length()
 *         error_poly = [None] * err_vec.length()
 */
  }

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":439
 *         return result, error_poly
 * 
 *     return None, None             # <<<<<<<<<<<<<<
 * 
 * def sqrt_mod(a, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__2);
  __pyx_r = __pyx_tuple__2;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":389
 *     return AvailableThreads()
 * 
 * cpdef gao_interpolate(x, y, int k, modulus, z=None, omega=None, order=None,             # <<<<<<<<<<<<<<
 *                       use_omega_powers=False):
 *     cdef vec_ZZ_p x_vec, y_vec, res_vec, err_vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.gao_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_is_null);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_error_poly);
  __Pyx_XDECREF(__pyx_v_yi);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_25gao_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_25gao_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_v_k;
  PyObject *__pyx_v_modulus = 0;
  PyObject *__pyx_v_z = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_order = 0;
  PyObject *__pyx_v_use_omega_powers = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gao_interpolate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_k,&__pyx_n_s_modulus,&__pyx_n_s_z,&__pyx_n_s_omega,&__pyx_n_s_order,&__pyx_n_s_use_omega_powers,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);

    /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":390
 * 
 * cpdef gao_interpolate(x, y, int k, modulus, z=None, omega=None, order=None,
 *                       use_omega_powers=False):             # <<<<<<<<<<<<<<
 *     cdef vec_ZZ_p x_vec, y_vec, res_vec, err_vec
 *     cdef ZZ_p zz_omega
 */
    values[7] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gao_interpolate", 0, 4, 8, 1); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gao_interpolate", 0, 4, 8, 2); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_modulus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gao_interpolate", 0, 4, 8, 3); __PYX_ERR(0, 389, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_omega_powers);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gao_interpolate") < 0)) __PYX_ERR(0, 389, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_k = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L3_error)
    __pyx_v_modulus = values[3];
    __pyx_v_z = values[4];
    __pyx_v_omega = values[5];
    __pyx_v_order = values[6];
    __pyx_v_use_omega_powers = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gao_interpolate", 0, 4, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 389, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.gao_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_24gao_interpolate(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_k, __pyx_v_modulus, __pyx_v_z, __pyx_v_omega, __pyx_v_order, __pyx_v_use_omega_powers);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":389
 *     return AvailableThreads()
 * 
 * cpdef gao_interpolate(x, y, int k, modulus, z=None, omega=None, order=None,             # <<<<<<<<<<<<<<
 *                       use_omega_powers=False):
 *     cdef vec_ZZ_p x_vec, y_vec, res_vec, err_vec
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_24gao_interpolate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_k, PyObject *__pyx_v_modulus, PyObject *__pyx_v_z, PyObject *__pyx_v_omega, PyObject *__pyx_v_order, PyObject *__pyx_v_use_omega_powers) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate __pyx_t_2;
  __Pyx_RefNannySetupContext("gao_interpolate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.z = __pyx_v_z;
  __pyx_t_2.omega = __pyx_v_omega;
  __pyx_t_2.order = __pyx_v_order;
  __pyx_t_2.use_omega_powers = __pyx_v_use_omega_powers;
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_gao_interpolate(__pyx_v_x, __pyx_v_y, __pyx_v_k, __pyx_v_modulus, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.gao_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":441
 *     return None, None
 * 
 * def sqrt_mod(a, n):             # <<<<<<<<<<<<<<
 *     cdef ZZ x
 *     SqrRootMod(x, intToZZ(a), intToZZ(n))
 */

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_27sqrt_mod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_27sqrt_mod = {"sqrt_mod", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_27sqrt_mod, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_27sqrt_mod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sqrt_mod (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_n,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sqrt_mod", 1, 2, 2, 1); __PYX_ERR(0, 441, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sqrt_mod") < 0)) __PYX_ERR(0, 441, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_n = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sqrt_mod", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 441, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.sqrt_mod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_26sqrt_mod(__pyx_self, __pyx_v_a, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_26sqrt_mod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_n) {
  ZZ __pyx_v_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sqrt_mod", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":443
 * def sqrt_mod(a, n):
 *     cdef ZZ x
 *     SqrRootMod(x, intToZZ(a), intToZZ(n))             # <<<<<<<<<<<<<<
 *     return int(ccrepr(x))
 * 
 */
  SqrRootMod(__pyx_v_x, __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_a), __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_intToZZ(__pyx_v_n));

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":444
 *     cdef ZZ x
 *     SqrRootMod(x, intToZZ(a), intToZZ(n))
 *     return int(ccrepr(x))             # <<<<<<<<<<<<<<
 * 
 * cpdef SetNumThreads(int n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ccrepr<ZZ>(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":441
 *     return None, None
 * 
 * def sqrt_mod(a, n):             # <<<<<<<<<<<<<<
 *     cdef ZZ x
 *     SqrRootMod(x, intToZZ(a), intToZZ(n))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.sqrt_mod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":446
 *     return int(ccrepr(x))
 * 
 * cpdef SetNumThreads(int n):             # <<<<<<<<<<<<<<
 *     """
 *     Set threads for both NTL and OpenMP
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_29SetNumThreads(PyObject *__pyx_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_SetNumThreads(int __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("SetNumThreads", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":451
 *     :param n: Number of threads
 *     """
 *     SetNTLNumThreads(n)             # <<<<<<<<<<<<<<
 *     openmp.omp_set_num_threads(n)
 * 
 */
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_SetNTLNumThreads(__pyx_v_n, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":452
 *     """
 *     SetNTLNumThreads(n)
 *     openmp.omp_set_num_threads(n)             # <<<<<<<<<<<<<<
 * 
 * cpdef GetMaxThreads():
 */
  omp_set_num_threads(__pyx_v_n);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":446
 *     return int(ccrepr(x))
 * 
 * cpdef SetNumThreads(int n):             # <<<<<<<<<<<<<<
 *     """
 *     Set threads for both NTL and OpenMP
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.SetNumThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_29SetNumThreads(PyObject *__pyx_self, PyObject *__pyx_arg_n); /*proto*/
static char __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_28SetNumThreads[] = "\n    Set threads for both NTL and OpenMP\n    :param n: Number of threads\n    ";
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_29SetNumThreads(PyObject *__pyx_self, PyObject *__pyx_arg_n) {
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetNumThreads (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_int(__pyx_arg_n); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.SetNumThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_28SetNumThreads(__pyx_self, ((int)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_28SetNumThreads(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("SetNumThreads", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_SetNumThreads(__pyx_v_n, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.SetNumThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":454
 *     openmp.omp_set_num_threads(n)
 * 
 * cpdef GetMaxThreads():             # <<<<<<<<<<<<<<
 *     return openmp.omp_get_max_threads()
 */

static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_31GetMaxThreads(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_GetMaxThreads(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMaxThreads", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":455
 * 
 * cpdef GetMaxThreads():
 *     return openmp.omp_get_max_threads()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(omp_get_max_threads()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":454
 *     openmp.omp_set_num_threads(n)
 * 
 * cpdef GetMaxThreads():             # <<<<<<<<<<<<<<
 *     return openmp.omp_get_max_threads()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.GetMaxThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_31GetMaxThreads(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_31GetMaxThreads(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetMaxThreads (wrapper)", 0);
  __pyx_r = __pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_30GetMaxThreads(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_30GetMaxThreads(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GetMaxThreads", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_GetMaxThreads(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("honeybadgermpc.ntl._hbmpc_ntl_helpers.GetMaxThreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"lagrange_interpolate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_1lagrange_interpolate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_lagrange_interpolate},
  {"evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_3evaluate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_2evaluate},
  {"vandermonde_inverse", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_5vandermonde_inverse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_4vandermonde_inverse},
  {"vandermonde_batch_interpolate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_7vandermonde_batch_interpolate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_6vandermonde_batch_interpolate},
  {"vandermonde_batch_evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_9vandermonde_batch_evaluate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_8vandermonde_batch_evaluate},
  {"fft", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_11fft, METH_VARARGS|METH_KEYWORDS, 0},
  {"partial_fft", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_13partial_fft, METH_VARARGS|METH_KEYWORDS, 0},
  {"fft_batch_evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_15fft_batch_evaluate, METH_VARARGS|METH_KEYWORDS, 0},
  {"SetNTLNumThreads", (PyCFunction)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_21SetNTLNumThreads, METH_O, 0},
  {"AvailableNTLThreads", (PyCFunction)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_23AvailableNTLThreads, METH_NOARGS, 0},
  {"gao_interpolate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_25gao_interpolate, METH_VARARGS|METH_KEYWORDS, 0},
  {"SetNumThreads", (PyCFunction)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_29SetNumThreads, METH_O, __pyx_doc_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_28SetNumThreads},
  {"GetMaxThreads", (PyCFunction)__pyx_pw_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_31GetMaxThreads, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__hbmpc_ntl_helpers(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__hbmpc_ntl_helpers},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_hbmpc_ntl_helpers",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_Ad_evals_vec, __pyx_k_Ad_evals_vec, sizeof(__pyx_k_Ad_evals_vec), 0, 0, 1, 1},
  {&__pyx_n_s_InterpolationError, __pyx_k_InterpolationError, sizeof(__pyx_k_InterpolationError), 0, 0, 1, 1},
  {&__pyx_kp_s_Interpolation_failed, __pyx_k_Interpolation_failed, sizeof(__pyx_k_Interpolation_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_arguments, __pyx_k_Invalid_arguments, sizeof(__pyx_k_Invalid_arguments), 0, 0, 1, 0},
  {&__pyx_n_s_P_coeffs, __pyx_k_P_coeffs, sizeof(__pyx_k_P_coeffs), 0, 0, 1, 1},
  {&__pyx_kp_u_Unsupported_data_type, __pyx_k_Unsupported_data_type, sizeof(__pyx_k_Unsupported_data_type), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_bit_length, __pyx_k_bit_length, sizeof(__pyx_k_bit_length), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_coeffs, __pyx_k_coeffs, sizeof(__pyx_k_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_data_list, __pyx_k_data_list, sizeof(__pyx_k_data_list), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_fft_batch_interpolate, __pyx_k_fft_batch_interpolate, sizeof(__pyx_k_fft_batch_interpolate), 0, 0, 1, 1},
  {&__pyx_n_s_fft_interpolate, __pyx_k_fft_interpolate, sizeof(__pyx_k_fft_interpolate), 0, 0, 1, 1},
  {&__pyx_n_s_from_bytes, __pyx_k_from_bytes, sizeof(__pyx_k_from_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_honeybadgermpc_ntl__hbmpc_ntl_he, __pyx_k_honeybadgermpc_ntl__hbmpc_ntl_he, sizeof(__pyx_k_honeybadgermpc_ntl__hbmpc_ntl_he), 0, 0, 1, 1},
  {&__pyx_kp_s_honeybadgermpc_ntl_hbmpc_ntl_hel, __pyx_k_honeybadgermpc_ntl_hbmpc_ntl_hel, sizeof(__pyx_k_honeybadgermpc_ntl_hbmpc_ntl_hel), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_little, __pyx_k_little, sizeof(__pyx_k_little), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_modulus, __pyx_k_modulus, sizeof(__pyx_k_modulus), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_chunks, __pyx_k_n_chunks, sizeof(__pyx_k_n_chunks), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_polynomial, __pyx_k_polynomial, sizeof(__pyx_k_polynomial), 0, 0, 1, 1},
  {&__pyx_n_s_polynomials, __pyx_k_polynomials, sizeof(__pyx_k_polynomials), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_vec_list, __pyx_k_result_vec_list, sizeof(__pyx_k_result_vec_list), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt_mod, __pyx_k_sqrt_mod, sizeof(__pyx_k_sqrt_mod), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_bytes, __pyx_k_to_bytes, sizeof(__pyx_k_to_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_use_omega_powers, __pyx_k_use_omega_powers, sizeof(__pyx_k_use_omega_powers), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y_vec, __pyx_k_y_vec, sizeof(__pyx_k_y_vec), 0, 0, 1, 1},
  {&__pyx_n_s_y_vec_list, __pyx_k_y_vec_list, sizeof(__pyx_k_y_vec_list), 0, 0, 1, 1},
  {&__pyx_n_s_ys, __pyx_k_ys, sizeof(__pyx_k_ys), 0, 0, 1, 1},
  {&__pyx_n_s_ys_list, __pyx_k_ys_list, sizeof(__pyx_k_ys_list), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_z_vec, __pyx_k_z_vec, sizeof(__pyx_k_z_vec), 0, 0, 1, 1},
  {&__pyx_n_s_zs, __pyx_k_zs, sizeof(__pyx_k_zs), 0, 0, 1, 1},
  {&__pyx_n_s_zz_modulus, __pyx_k_zz_modulus, sizeof(__pyx_k_zz_modulus), 0, 0, 1, 1},
  {&__pyx_n_s_zz_omega, __pyx_k_zz_omega, sizeof(__pyx_k_zz_omega), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 172, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":62
 *     cdef vec_ZZ_p result
 *     if not isinstance(v, list) and not isinstance(v, tuple):
 *         raise ValueError("Invalid arguments")             # <<<<<<<<<<<<<<
 * 
 *     result.SetLength(len(v))
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Invalid_arguments); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":439
 *         return result, error_poly
 * 
 *     return None, None             # <<<<<<<<<<<<<<
 * 
 * def sqrt_mod(a, n):
 */
  __pyx_tuple__2 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":318
 *     return result
 * 
 * def fft_interpolate(zs, ys, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int k = len(zs)
 */
  __pyx_tuple__3 = PyTuple_Pack(14, __pyx_n_s_zs, __pyx_n_s_ys, __pyx_n_s_omega, __pyx_n_s_modulus, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_k, __pyx_n_s_z_vec, __pyx_n_s_y_vec, __pyx_n_s_Ad_evals_vec, __pyx_n_s_P_coeffs, __pyx_n_s_A, __pyx_n_s_zz_omega, __pyx_n_s_result); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(5, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_honeybadgermpc_ntl_hbmpc_ntl_hel, __pyx_n_s_fft_interpolate, 318, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 318, __pyx_L1_error)

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":342
 *     return result
 * 
 * def fft_batch_interpolate(zs, ys_list, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     cdef int k = len(zs)
 */
  __pyx_tuple__6 = PyTuple_Pack(20, __pyx_n_s_zs, __pyx_n_s_ys_list, __pyx_n_s_omega, __pyx_n_s_modulus, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_z_vec, __pyx_n_s_y_vec, __pyx_n_s_Ad_evals_vec, __pyx_n_s_P_coeffs, __pyx_n_s_A, __pyx_n_s_zz_omega, __pyx_n_s_n_chunks, __pyx_n_s_zz_modulus, __pyx_n_s_y_vec_list, __pyx_n_s_result_vec_list, __pyx_n_s_result, __pyx_n_s__5); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(5, 0, 20, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_honeybadgermpc_ntl_hbmpc_ntl_hel, __pyx_n_s_fft_batch_interpolate, 342, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 342, __pyx_L1_error)

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":441
 *     return None, None
 * 
 * def sqrt_mod(a, n):             # <<<<<<<<<<<<<<
 *     cdef ZZ x
 *     SqrRootMod(x, intToZZ(a), intToZZ(n))
 */
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_n_s_a, __pyx_n_s_n, __pyx_n_s_x); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_honeybadgermpc_ntl_hbmpc_ntl_hel, __pyx_n_s_sqrt_mod, 441, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_hbmpc_ntl_helpers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_hbmpc_ntl_helpers(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__hbmpc_ntl_helpers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__hbmpc_ntl_helpers(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__hbmpc_ntl_helpers(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_hbmpc_ntl_helpers' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__hbmpc_ntl_helpers(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_hbmpc_ntl_helpers", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_honeybadgermpc__ntl___hbmpc_ntl_helpers) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "honeybadgermpc.ntl._hbmpc_ntl_helpers")) {
      if (unlikely(PyDict_SetItemString(modules, "honeybadgermpc.ntl._hbmpc_ntl_helpers", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":135
 * 
 * 
 * class InterpolationError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_InterpolationError, __pyx_n_s_InterpolationError, (PyObject *) NULL, __pyx_n_s_honeybadgermpc_ntl__hbmpc_ntl_he, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_InterpolationError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InterpolationError, __pyx_t_4) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":318
 *     return result
 * 
 * def fft_interpolate(zs, ys, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int k = len(zs)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_17fft_interpolate, NULL, __pyx_n_s_honeybadgermpc_ntl__hbmpc_ntl_he); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fft_interpolate, __pyx_t_1) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":342
 *     return result
 * 
 * def fft_batch_interpolate(zs, ys_list, omega, modulus, int n):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     cdef int k = len(zs)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_19fft_batch_interpolate, NULL, __pyx_n_s_honeybadgermpc_ntl__hbmpc_ntl_he); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fft_batch_interpolate, __pyx_t_1) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":441
 *     return None, None
 * 
 * def sqrt_mod(a, n):             # <<<<<<<<<<<<<<
 *     cdef ZZ x
 *     SqrRootMod(x, intToZZ(a), intToZZ(n))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14honeybadgermpc_3ntl_18_hbmpc_ntl_helpers_27sqrt_mod, NULL, __pyx_n_s_honeybadgermpc_ntl__hbmpc_ntl_he); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sqrt_mod, __pyx_t_1) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "honeybadgermpc/ntl/hbmpc_ntl_helpers.pyx":1
 * # Overall, the objective of this NTL-Python interface is to minimize the             # <<<<<<<<<<<<<<
 * # amount of code in C++
 * # The data validation and checking must be done in python in all cases!
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init honeybadgermpc.ntl._hbmpc_ntl_helpers", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init honeybadgermpc.ntl._hbmpc_ntl_helpers");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(b)
            if (unlikely(b == -1 && ((unsigned long)a) == 0-(unsigned long)a))
                return PyInt_Type.tp_as_number->nb_floor_divide(op1, op2);
            else {
                long q, r;
                q = a / b;
                r = a - q*b;
                q -= ((r != 0) & ((r ^ b) < 0));
                x = q;
            }
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_floor_divide(op1, op2);
            }
        }
                __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(b)
                {
                    long q, r;
                    q = a / b;
                    r = a - q*b;
                    q -= ((r != 0) & ((r ^ b) < 0));
                    x = q;
                }
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                {
                    PY_LONG_LONG q, r;
                    q = lla / llb;
                    r = lla - q*llb;
                    q -= ((r != 0) & ((r ^ llb) < 0));
                    llx = q;
                }
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceFloorDivide : PyNumber_FloorDivide)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
